{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Witcape/PSO/blob/main/Final_Correct_Different_Initialisation_Methods.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9uP6rkKmNnMe"
      },
      "source": [
        "###Installing LLM"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kY6BJbl4e8Fb"
      },
      "outputs": [],
      "source": [
        "# !pip install accelerate\n",
        "# import accelerate"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LI3J3o7JdXmC",
        "outputId": "6a9beb82-1a26-4f11-8b04-9b8c4843bdbb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Using pip 23.1.2 from /usr/local/lib/python3.10/dist-packages/pip (python 3.10)\n",
            "Collecting llama-cpp-python==0.1.78\n",
            "  Downloading llama_cpp_python-0.1.78.tar.gz (1.7 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m14.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Running command pip subprocess to install build dependencies\n",
            "  Using pip 23.1.2 from /usr/local/lib/python3.10/dist-packages/pip (python 3.10)\n",
            "  Collecting setuptools>=42\n",
            "    Downloading setuptools-70.2.0-py3-none-any.whl (930 kB)\n",
            "       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 930.8/930.8 kB 5.8 MB/s eta 0:00:00\n",
            "  Collecting scikit-build>=0.13\n",
            "    Downloading scikit_build-0.18.0-py3-none-any.whl (85 kB)\n",
            "       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 85.3/85.3 kB 6.4 MB/s eta 0:00:00\n",
            "  Collecting cmake>=3.18\n",
            "    Downloading cmake-3.29.6-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (26.7 MB)\n",
            "       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 26.7/26.7 MB 21.5 MB/s eta 0:00:00\n",
            "  Collecting ninja\n",
            "    Downloading ninja-1.11.1.1-py2.py3-none-manylinux1_x86_64.manylinux_2_5_x86_64.whl (307 kB)\n",
            "       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 307.2/307.2 kB 14.0 MB/s eta 0:00:00\n",
            "  Collecting distro (from scikit-build>=0.13)\n",
            "    Downloading distro-1.9.0-py3-none-any.whl (20 kB)\n",
            "  Collecting packaging (from scikit-build>=0.13)\n",
            "    Downloading packaging-24.1-py3-none-any.whl (53 kB)\n",
            "       ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 54.0/54.0 kB 3.6 MB/s eta 0:00:00\n",
            "  Collecting tomli (from scikit-build>=0.13)\n",
            "    Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n",
            "  Collecting wheel>=0.32.0 (from scikit-build>=0.13)\n",
            "    Using cached wheel-0.43.0-py3-none-any.whl (65 kB)\n",
            "  Installing collected packages: ninja, wheel, tomli, setuptools, packaging, distro, cmake, scikit-build\n",
            "    Creating /tmp/pip-build-env-pdr2hcqj/overlay/local/bin\n",
            "    changing mode of /tmp/pip-build-env-pdr2hcqj/overlay/local/bin/ninja to 755\n",
            "    changing mode of /tmp/pip-build-env-pdr2hcqj/overlay/local/bin/wheel to 755\n",
            "    changing mode of /tmp/pip-build-env-pdr2hcqj/overlay/local/bin/distro to 755\n",
            "    changing mode of /tmp/pip-build-env-pdr2hcqj/overlay/local/bin/cmake to 755\n",
            "    changing mode of /tmp/pip-build-env-pdr2hcqj/overlay/local/bin/cpack to 755\n",
            "    changing mode of /tmp/pip-build-env-pdr2hcqj/overlay/local/bin/ctest to 755\n",
            "  ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "  ipython 7.34.0 requires jedi>=0.16, which is not installed.\n",
            "  Successfully installed cmake-3.29.6 distro-1.9.0 ninja-1.11.1.1 packaging-24.1 scikit-build-0.18.0 setuptools-70.2.0 tomli-2.0.1 wheel-0.43.0\n",
            "  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Running command Getting requirements to build wheel\n",
            "  running egg_info\n",
            "  writing llama_cpp_python.egg-info/PKG-INFO\n",
            "  writing dependency_links to llama_cpp_python.egg-info/dependency_links.txt\n",
            "  writing requirements to llama_cpp_python.egg-info/requires.txt\n",
            "  writing top-level names to llama_cpp_python.egg-info/top_level.txt\n",
            "  reading manifest file 'llama_cpp_python.egg-info/SOURCES.txt'\n",
            "  adding license file 'LICENSE.md'\n",
            "  writing manifest file 'llama_cpp_python.egg-info/SOURCES.txt'\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "  Running command Preparing metadata (pyproject.toml)\n",
            "  running dist_info\n",
            "  creating /tmp/pip-modern-metadata-a_fj4kzy/llama_cpp_python.egg-info\n",
            "  writing /tmp/pip-modern-metadata-a_fj4kzy/llama_cpp_python.egg-info/PKG-INFO\n",
            "  writing dependency_links to /tmp/pip-modern-metadata-a_fj4kzy/llama_cpp_python.egg-info/dependency_links.txt\n",
            "  writing requirements to /tmp/pip-modern-metadata-a_fj4kzy/llama_cpp_python.egg-info/requires.txt\n",
            "  writing top-level names to /tmp/pip-modern-metadata-a_fj4kzy/llama_cpp_python.egg-info/top_level.txt\n",
            "  writing manifest file '/tmp/pip-modern-metadata-a_fj4kzy/llama_cpp_python.egg-info/SOURCES.txt'\n",
            "  reading manifest file '/tmp/pip-modern-metadata-a_fj4kzy/llama_cpp_python.egg-info/SOURCES.txt'\n",
            "  adding license file 'LICENSE.md'\n",
            "  writing manifest file '/tmp/pip-modern-metadata-a_fj4kzy/llama_cpp_python.egg-info/SOURCES.txt'\n",
            "  creating '/tmp/pip-modern-metadata-a_fj4kzy/llama_cpp_python-0.1.78.dist-info'\n",
            "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting numpy==1.23.4\n",
            "  Downloading numpy-1.23.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m17.1/17.1 MB\u001b[0m \u001b[31m156.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting typing-extensions>=4.5.0 (from llama-cpp-python==0.1.78)\n",
            "  Downloading typing_extensions-4.12.2-py3-none-any.whl (37 kB)\n",
            "Collecting diskcache>=5.6.1 (from llama-cpp-python==0.1.78)\n",
            "  Downloading diskcache-5.6.3-py3-none-any.whl (45 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m45.5/45.5 kB\u001b[0m \u001b[31m231.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hBuilding wheels for collected packages: llama-cpp-python\n",
            "  Running command Building wheel for llama-cpp-python (pyproject.toml)\n",
            "\n",
            "\n",
            "  --------------------------------------------------------------------------------\n",
            "  -- Trying 'Ninja' generator\n",
            "  --------------------------------\n",
            "  ---------------------------\n",
            "  ----------------------\n",
            "  -----------------\n",
            "  ------------\n",
            "  -------\n",
            "  --\n",
            "  Not searching for unused variables given on the command line.\n",
            "  -- The C compiler identification is GNU 11.4.0\n",
            "  -- Detecting C compiler ABI info\n",
            "  -- Detecting C compiler ABI info - done\n",
            "  -- Check for working C compiler: /usr/bin/cc - skipped\n",
            "  -- Detecting C compile features\n",
            "  -- Detecting C compile features - done\n",
            "  -- The CXX compiler identification is GNU 11.4.0\n",
            "  -- Detecting CXX compiler ABI info\n",
            "  -- Detecting CXX compiler ABI info - done\n",
            "  -- Check for working CXX compiler: /usr/bin/c++ - skipped\n",
            "  -- Detecting CXX compile features\n",
            "  -- Detecting CXX compile features - done\n",
            "  -- Configuring done (0.7s)\n",
            "  -- Generating done (0.0s)\n",
            "  -- Build files have been written to: /tmp/pip-install-bpf6oj4c/llama-cpp-python_6d5c9db36f0c439b8ab4fc7e86cde516/_cmake_test_compile/build\n",
            "  --\n",
            "  -------\n",
            "  ------------\n",
            "  -----------------\n",
            "  ----------------------\n",
            "  ---------------------------\n",
            "  --------------------------------\n",
            "  -- Trying 'Ninja' generator - success\n",
            "  --------------------------------------------------------------------------------\n",
            "\n",
            "  Configuring Project\n",
            "    Working directory:\n",
            "      /tmp/pip-install-bpf6oj4c/llama-cpp-python_6d5c9db36f0c439b8ab4fc7e86cde516/_skbuild/linux-x86_64-3.10/cmake-build\n",
            "    Command:\n",
            "      /tmp/pip-build-env-pdr2hcqj/overlay/local/lib/python3.10/dist-packages/cmake/data/bin/cmake /tmp/pip-install-bpf6oj4c/llama-cpp-python_6d5c9db36f0c439b8ab4fc7e86cde516 -G Ninja -DCMAKE_MAKE_PROGRAM:FILEPATH=/tmp/pip-build-env-pdr2hcqj/overlay/local/lib/python3.10/dist-packages/ninja/data/bin/ninja --no-warn-unused-cli -DCMAKE_INSTALL_PREFIX:PATH=/tmp/pip-install-bpf6oj4c/llama-cpp-python_6d5c9db36f0c439b8ab4fc7e86cde516/_skbuild/linux-x86_64-3.10/cmake-install -DPYTHON_VERSION_STRING:STRING=3.10.12 -DSKBUILD:INTERNAL=TRUE -DCMAKE_MODULE_PATH:PATH=/tmp/pip-build-env-pdr2hcqj/overlay/local/lib/python3.10/dist-packages/skbuild/resources/cmake -DPYTHON_EXECUTABLE:PATH=/usr/bin/python3 -DPYTHON_INCLUDE_DIR:PATH=/usr/include/python3.10 -DPYTHON_LIBRARY:PATH=/usr/lib/x86_64-linux-gnu/libpython3.10.so -DPython_EXECUTABLE:PATH=/usr/bin/python3 -DPython_ROOT_DIR:PATH=/usr -DPython_FIND_REGISTRY:STRING=NEVER -DPython_INCLUDE_DIR:PATH=/usr/include/python3.10 -DPython3_EXECUTABLE:PATH=/usr/bin/python3 -DPython3_ROOT_DIR:PATH=/usr -DPython3_FIND_REGISTRY:STRING=NEVER -DPython3_INCLUDE_DIR:PATH=/usr/include/python3.10 -DCMAKE_MAKE_PROGRAM:FILEPATH=/tmp/pip-build-env-pdr2hcqj/overlay/local/lib/python3.10/dist-packages/ninja/data/bin/ninja -DLLAMA_CUBLAS=on -DCMAKE_BUILD_TYPE:STRING=Release -DLLAMA_CUBLAS=on\n",
            "\n",
            "  Not searching for unused variables given on the command line.\n",
            "  -- The C compiler identification is GNU 11.4.0\n",
            "  -- The CXX compiler identification is GNU 11.4.0\n",
            "  -- Detecting C compiler ABI info\n",
            "  -- Detecting C compiler ABI info - done\n",
            "  -- Check for working C compiler: /usr/bin/cc - skipped\n",
            "  -- Detecting C compile features\n",
            "  -- Detecting C compile features - done\n",
            "  -- Detecting CXX compiler ABI info\n",
            "  -- Detecting CXX compiler ABI info - done\n",
            "  -- Check for working CXX compiler: /usr/bin/c++ - skipped\n",
            "  -- Detecting CXX compile features\n",
            "  -- Detecting CXX compile features - done\n",
            "  -- Found Git: /usr/bin/git (found version \"2.34.1\")\n",
            "  fatal: not a git repository (or any of the parent directories): .git\n",
            "  fatal: not a git repository (or any of the parent directories): .git\n",
            "  CMake Warning at vendor/llama.cpp/CMakeLists.txt:117 (message):\n",
            "    Git repository not found; to enable automatic generation of build info,\n",
            "    make sure Git is installed and the project is a Git repository.\n",
            "\n",
            "\n",
            "  -- Performing Test CMAKE_HAVE_LIBC_PTHREAD\n",
            "  -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success\n",
            "  -- Found Threads: TRUE\n",
            "  -- Found CUDAToolkit: /usr/local/cuda/targets/x86_64-linux/include (found version \"12.2.140\")\n",
            "  -- cuBLAS found\n",
            "  -- The CUDA compiler identification is NVIDIA 12.2.140\n",
            "  -- Detecting CUDA compiler ABI info\n",
            "  -- Detecting CUDA compiler ABI info - done\n",
            "  -- Check for working CUDA compiler: /usr/local/cuda/bin/nvcc - skipped\n",
            "  -- Detecting CUDA compile features\n",
            "  -- Detecting CUDA compile features - done\n",
            "  -- Using CUDA architectures: 52;61;70\n",
            "  -- CMAKE_SYSTEM_PROCESSOR: x86_64\n",
            "  -- x86 detected\n",
            "  -- Configuring done (4.1s)\n",
            "  -- Generating done (0.0s)\n",
            "  -- Build files have been written to: /tmp/pip-install-bpf6oj4c/llama-cpp-python_6d5c9db36f0c439b8ab4fc7e86cde516/_skbuild/linux-x86_64-3.10/cmake-build\n",
            "  [1/9] Building C object vendor/llama.cpp/CMakeFiles/ggml.dir/ggml-alloc.c.o\n",
            "  [2/9] Building C object vendor/llama.cpp/CMakeFiles/ggml.dir/k_quants.c.o\n",
            "  [3/9] Building C object vendor/llama.cpp/CMakeFiles/ggml.dir/ggml.c.o\n",
            "  [4/9] Building CXX object vendor/llama.cpp/CMakeFiles/llama.dir/llama.cpp.o\n",
            "  [5/9] Building CUDA object vendor/llama.cpp/CMakeFiles/ggml.dir/ggml-cuda.cu.o\n",
            "  [6/9] Linking CXX shared library vendor/llama.cpp/libllama.so\n",
            "  [7/9] Linking CUDA shared library vendor/llama.cpp/libggml_shared.so\n",
            "  [8/9] Linking CUDA static library vendor/llama.cpp/libggml_static.a\n",
            "  [8/9] Install the project...\n",
            "  -- Install configuration: \"Release\"\n",
            "  -- Installing: /tmp/pip-install-bpf6oj4c/llama-cpp-python_6d5c9db36f0c439b8ab4fc7e86cde516/_skbuild/linux-x86_64-3.10/cmake-install/lib/libggml_shared.so\n",
            "  -- Installing: /tmp/pip-install-bpf6oj4c/llama-cpp-python_6d5c9db36f0c439b8ab4fc7e86cde516/_skbuild/linux-x86_64-3.10/cmake-install/lib/libllama.so\n",
            "  -- Set non-toolchain portion of runtime path of \"/tmp/pip-install-bpf6oj4c/llama-cpp-python_6d5c9db36f0c439b8ab4fc7e86cde516/_skbuild/linux-x86_64-3.10/cmake-install/lib/libllama.so\" to \"\"\n",
            "  -- Installing: /tmp/pip-install-bpf6oj4c/llama-cpp-python_6d5c9db36f0c439b8ab4fc7e86cde516/_skbuild/linux-x86_64-3.10/cmake-install/bin/convert.py\n",
            "  -- Installing: /tmp/pip-install-bpf6oj4c/llama-cpp-python_6d5c9db36f0c439b8ab4fc7e86cde516/_skbuild/linux-x86_64-3.10/cmake-install/bin/convert-lora-to-ggml.py\n",
            "  -- Installing: /tmp/pip-install-bpf6oj4c/llama-cpp-python_6d5c9db36f0c439b8ab4fc7e86cde516/_skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/libllama.so\n",
            "  -- Set non-toolchain portion of runtime path of \"/tmp/pip-install-bpf6oj4c/llama-cpp-python_6d5c9db36f0c439b8ab4fc7e86cde516/_skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/libllama.so\" to \"\"\n",
            "\n",
            "  copying llama_cpp/__init__.py -> _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/__init__.py\n",
            "  copying llama_cpp/llama_types.py -> _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/llama_types.py\n",
            "  copying llama_cpp/llama.py -> _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/llama.py\n",
            "  copying llama_cpp/utils.py -> _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/utils.py\n",
            "  copying llama_cpp/llama_grammar.py -> _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/llama_grammar.py\n",
            "  copying llama_cpp/llama_cpp.py -> _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/llama_cpp.py\n",
            "  creating directory _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/server\n",
            "  copying llama_cpp/server/__init__.py -> _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/server/__init__.py\n",
            "  copying llama_cpp/server/app.py -> _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/server/app.py\n",
            "  copying llama_cpp/server/__main__.py -> _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/server/__main__.py\n",
            "  copying /tmp/pip-install-bpf6oj4c/llama-cpp-python_6d5c9db36f0c439b8ab4fc7e86cde516/llama_cpp/py.typed -> _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/py.typed\n",
            "\n",
            "  running bdist_wheel\n",
            "  running build\n",
            "  running build_py\n",
            "  creating _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310\n",
            "  creating _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/__init__.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/llama_types.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/llama.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/utils.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/llama_grammar.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/llama_cpp.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp\n",
            "  creating _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/server\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/server/__init__.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/server\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/server/app.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/server\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/server/__main__.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/server\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/py.typed -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/libllama.so -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/__init__.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/llama_types.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/llama.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/utils.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/llama_grammar.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/llama_cpp.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/server/__init__.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/server\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/server/app.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/server\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/llama_cpp/server/__main__.py -> _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/server\n",
            "  copied 9 files\n",
            "  running build_ext\n",
            "  installing to _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel\n",
            "  running install\n",
            "  running install_lib\n",
            "  creating _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64\n",
            "  creating _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel\n",
            "  creating _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/__init__.py -> _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/llama_types.py -> _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/py.typed -> _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/libllama.so -> _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/llama.py -> _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/utils.py -> _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp\n",
            "  copying _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/llama_grammar.py -> _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp\n",
            "  creating _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp/server\n",
            "  copying _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/server/__init__.py -> _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp/server\n",
            "  copying _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/server/app.py -> _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp/server\n",
            "  copying _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/server/__main__.py -> _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp/server\n",
            "  copying _skbuild/linux-x86_64-3.10/setuptools/lib.linux-x86_64-cpython-310/llama_cpp/llama_cpp.py -> _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp\n",
            "  copied 11 files\n",
            "  running install_data\n",
            "  creating _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp_python-0.1.78.data\n",
            "  creating _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp_python-0.1.78.data/data\n",
            "  creating _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp_python-0.1.78.data/data/lib\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/lib/libllama.so -> _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp_python-0.1.78.data/data/lib\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/lib/libggml_shared.so -> _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp_python-0.1.78.data/data/lib\n",
            "  creating _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp_python-0.1.78.data/data/bin\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/bin/convert.py -> _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp_python-0.1.78.data/data/bin\n",
            "  copying _skbuild/linux-x86_64-3.10/cmake-install/bin/convert-lora-to-ggml.py -> _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp_python-0.1.78.data/data/bin\n",
            "  running install_egg_info\n",
            "  running egg_info\n",
            "  writing llama_cpp_python.egg-info/PKG-INFO\n",
            "  writing dependency_links to llama_cpp_python.egg-info/dependency_links.txt\n",
            "  writing requirements to llama_cpp_python.egg-info/requires.txt\n",
            "  writing top-level names to llama_cpp_python.egg-info/top_level.txt\n",
            "  reading manifest file 'llama_cpp_python.egg-info/SOURCES.txt'\n",
            "  adding license file 'LICENSE.md'\n",
            "  writing manifest file 'llama_cpp_python.egg-info/SOURCES.txt'\n",
            "  Copying llama_cpp_python.egg-info to _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp_python-0.1.78-py3.10.egg-info\n",
            "  running install_scripts\n",
            "  copied 0 files\n",
            "  creating _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel/llama_cpp_python-0.1.78.dist-info/WHEEL\n",
            "  creating '/tmp/pip-wheel-l9tvmeiq/.tmp-0y7xk7ay/llama_cpp_python-0.1.78-cp310-cp310-linux_x86_64.whl' and adding '_skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel' to it\n",
            "  adding 'llama_cpp/__init__.py'\n",
            "  adding 'llama_cpp/libllama.so'\n",
            "  adding 'llama_cpp/llama.py'\n",
            "  adding 'llama_cpp/llama_cpp.py'\n",
            "  adding 'llama_cpp/llama_grammar.py'\n",
            "  adding 'llama_cpp/llama_types.py'\n",
            "  adding 'llama_cpp/py.typed'\n",
            "  adding 'llama_cpp/utils.py'\n",
            "  adding 'llama_cpp/server/__init__.py'\n",
            "  adding 'llama_cpp/server/__main__.py'\n",
            "  adding 'llama_cpp/server/app.py'\n",
            "  adding 'llama_cpp_python-0.1.78.data/data/bin/convert-lora-to-ggml.py'\n",
            "  adding 'llama_cpp_python-0.1.78.data/data/bin/convert.py'\n",
            "  adding 'llama_cpp_python-0.1.78.data/data/lib/libggml_shared.so'\n",
            "  adding 'llama_cpp_python-0.1.78.data/data/lib/libllama.so'\n",
            "  adding 'llama_cpp_python-0.1.78.dist-info/LICENSE.md'\n",
            "  adding 'llama_cpp_python-0.1.78.dist-info/METADATA'\n",
            "  adding 'llama_cpp_python-0.1.78.dist-info/WHEEL'\n",
            "  adding 'llama_cpp_python-0.1.78.dist-info/top_level.txt'\n",
            "  adding 'llama_cpp_python-0.1.78.dist-info/RECORD'\n",
            "  removing _skbuild/linux-x86_64-3.10/setuptools/bdist.linux-x86_64/wheel\n",
            "  Building wheel for llama-cpp-python (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for llama-cpp-python: filename=llama_cpp_python-0.1.78-cp310-cp310-linux_x86_64.whl size=5811320 sha256=3442b121c8c3b3ea8c0b7135b744e4c658f449e920ba7014b7dd96bc49156f22\n",
            "  Stored in directory: /tmp/pip-ephem-wheel-cache-s500d5bh/wheels/61/f9/20/9ca660a9d3f2a47e44217059409478865948b5c8a1cba70030\n",
            "Successfully built llama-cpp-python\n",
            "Installing collected packages: typing-extensions, numpy, diskcache, llama-cpp-python\n",
            "  Attempting uninstall: typing-extensions\n",
            "    Found existing installation: typing_extensions 4.12.2\n",
            "    Uninstalling typing_extensions-4.12.2:\n",
            "      Removing file or directory /usr/local/lib/python3.10/dist-packages/__pycache__/typing_extensions.cpython-310.pyc\n",
            "      Removing file or directory /usr/local/lib/python3.10/dist-packages/typing_extensions-4.12.2.dist-info/\n",
            "      Removing file or directory /usr/local/lib/python3.10/dist-packages/typing_extensions.py\n",
            "      Successfully uninstalled typing_extensions-4.12.2\n",
            "  Attempting uninstall: numpy\n",
            "    Found existing installation: numpy 1.25.2\n",
            "    Uninstalling numpy-1.25.2:\n",
            "      Removing file or directory /usr/local/bin/f2py\n",
            "      Removing file or directory /usr/local/bin/f2py3\n",
            "      Removing file or directory /usr/local/bin/f2py3.10\n",
            "      Removing file or directory /usr/local/lib/python3.10/dist-packages/numpy-1.25.2.dist-info/\n",
            "      Removing file or directory /usr/local/lib/python3.10/dist-packages/numpy.libs/\n",
            "      Removing file or directory /usr/local/lib/python3.10/dist-packages/numpy/\n",
            "      Successfully uninstalled numpy-1.25.2\n",
            "  changing mode of /usr/local/bin/f2py to 755\n",
            "  changing mode of /usr/local/bin/f2py3 to 755\n",
            "  changing mode of /usr/local/bin/f2py3.10 to 755\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "torch 2.3.0+cu121 requires nvidia-cublas-cu12==12.1.3.1; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.3.0+cu121 requires nvidia-cuda-cupti-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.3.0+cu121 requires nvidia-cuda-nvrtc-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.3.0+cu121 requires nvidia-cuda-runtime-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.3.0+cu121 requires nvidia-cudnn-cu12==8.9.2.26; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.3.0+cu121 requires nvidia-cufft-cu12==11.0.2.54; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.3.0+cu121 requires nvidia-curand-cu12==10.3.2.106; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.3.0+cu121 requires nvidia-cusolver-cu12==11.4.5.107; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.3.0+cu121 requires nvidia-cusparse-cu12==12.1.0.106; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.3.0+cu121 requires nvidia-nccl-cu12==2.20.5; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "torch 2.3.0+cu121 requires nvidia-nvtx-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n",
            "chex 0.1.86 requires numpy>=1.24.1, but you have numpy 1.23.4 which is incompatible.\n",
            "pandas-stubs 2.0.3.230814 requires numpy>=1.25.0; python_version >= \"3.9\", but you have numpy 1.23.4 which is incompatible.\n",
            "tensorflow 2.15.0 requires numpy<2.0.0,>=1.23.5, but you have numpy 1.23.4 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[0mSuccessfully installed diskcache-5.6.3 llama-cpp-python-0.1.78 numpy-1.23.4 typing-extensions-4.12.2\n",
            "Requirement already satisfied: huggingface_hub in /usr/local/lib/python3.10/dist-packages (0.23.4)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface_hub) (3.15.4)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub) (2023.6.0)\n",
            "Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub) (24.1)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub) (6.0.1)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface_hub) (2.31.0)\n",
            "Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub) (4.66.4)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub) (4.12.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub) (2024.6.2)\n",
            "Requirement already satisfied: llama-cpp-python==0.1.78 in /usr/local/lib/python3.10/dist-packages (0.1.78)\n",
            "Requirement already satisfied: typing-extensions>=4.5.0 in /usr/local/lib/python3.10/dist-packages (from llama-cpp-python==0.1.78) (4.12.2)\n",
            "Requirement already satisfied: numpy>=1.20.0 in /usr/local/lib/python3.10/dist-packages (from llama-cpp-python==0.1.78) (1.23.4)\n",
            "Requirement already satisfied: diskcache>=5.6.1 in /usr/local/lib/python3.10/dist-packages (from llama-cpp-python==0.1.78) (5.6.3)\n",
            "Requirement already satisfied: numpy==1.23.4 in /usr/local/lib/python3.10/dist-packages (1.23.4)\n"
          ]
        }
      ],
      "source": [
        "!CMAKE_ARGS=\"-DLLAMA_CUBLAS=on\" FORCE_CMAKE=1 pip install llama-cpp-python==0.1.78 numpy==1.23.4 --force-reinstall --upgrade --no-cache-dir --verbose\n",
        "!pip install huggingface_hub\n",
        "!pip install llama-cpp-python==0.1.78\n",
        "!pip install numpy==1.23.4"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "N_vy42pqdcVV"
      },
      "outputs": [],
      "source": [
        "model_name_or_path = \"TheBloke/Llama-2-13B-chat-GGML\"\n",
        "model_basename = \"llama-2-13b-chat.ggmlv3.q5_1.bin\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qvTgXraAlBHe"
      },
      "outputs": [],
      "source": [
        "from huggingface_hub import hf_hub_download\n",
        "from llama_cpp import Llama\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176,
          "referenced_widgets": [
            "38cc58d7ba9d4ed0a006f1349f3ee226",
            "9cae8dd3c8f44e4ca2ec0f8f28340f5e",
            "e41bae8ba6e54479a60c8d0ace76ff76",
            "722e7d0ea7054ca181fb46579b92fa4c",
            "5752a9b8a3a045cabe685422e75c8e6b",
            "266f930c2b0544dba6780e3728ba79e6",
            "57c7a0ee62de418ea6367661d2d243d8",
            "dfd77fc2b7154127815da966b04a75c7",
            "595a3d3fd13242efae4bdebc5d69eaa7",
            "77c37e21e7d9410bb8e7432ed42051ea",
            "63f8371a479940df9e518ae46f062f09"
          ]
        },
        "id": "VI4g2cvtlEmy",
        "outputId": "8b9eb362-3ffd-4c0a-c78b-60f1d4cd5cf8"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:89: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "38cc58d7ba9d4ed0a006f1349f3ee226",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "llama-2-13b-chat.ggmlv3.q5_1.bin:   0%|          | 0.00/9.76G [00:00<?, ?B/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "model_path = hf_hub_download(repo_id=model_name_or_path, filename=model_basename)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JBKdKYX4mclG",
        "outputId": "90d57abe-727d-44e1-98b3-a38b9bb40e9e"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "AVX = 1 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | FMA = 1 | NEON = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | VSX = 0 | \n"
          ]
        }
      ],
      "source": [
        "# GPU\n",
        "lcpp_llm = None\n",
        "lcpp_llm = Llama(\n",
        "    model_path=model_path,\n",
        "    n_threads=2, # CPU cores\n",
        "    n_batch=512, # Should be between 1 and n_ctx, consider the amount of VRAM in your GPU.\n",
        "    n_gpu_layers=32 # Change this value based on your model and your GPU VRAM pool.\n",
        "    )"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XwOKn14tm6N1",
        "outputId": "2f21e2ea-6327-4e6f-f92b-76620559233c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "32"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "lcpp_llm.params.n_gpu_layers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oERE5I7bNyRZ"
      },
      "source": [
        "### Different Initialisation Methods over PSO"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SNwOmkAOSTpA"
      },
      "source": [
        "## CASE 1: Chaotic Number Generator"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yadxcTK4m8E5"
      },
      "outputs": [],
      "source": [
        "method ='Chaotic Number Generator'\n",
        "prompt = f\"generate precisely 20 numbers between -10 to 10 by using {method}, only 2 decimal places, \"\n",
        "prompt_template = f'''SYSTEM: You are a helpful, respectful, and honest assistant. Always answer as helpfully.\n",
        "\n",
        "USER: {prompt}\n",
        "\n",
        "ASSISTANT:\n",
        "'''"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kAEc1WZ2nEfB",
        "outputId": "36c08953-0768-4084-bdca-3822e3ba0fee"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Llama.generate: prefix-match hit\n"
          ]
        }
      ],
      "source": [
        "response=lcpp_llm(prompt=prompt_template, max_tokens=256, temperature=0.5, top_p=0.95,\n",
        "                  repeat_penalty=1.2, top_k=150,\n",
        "                  echo=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-tscz6l65VKs",
        "outputId": "5c8dea22-31a5-44a1-ff6c-2831a81ef428"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "{'id': 'cmpl-b9163c69-f58b-498d-9644-8494d10f9be8', 'object': 'text_completion', 'created': 1719904436, 'model': '/root/.cache/huggingface/hub/models--TheBloke--Llama-2-13B-chat-GGML/snapshots/3140827b4dfcb6b562cd87ee3d7f07109b014dd0/llama-2-13b-chat.ggmlv3.q5_1.bin', 'choices': [{'text': 'SYSTEM: You are a helpful, respectful, and honest assistant. Always answer as helpfully.\\n\\nUSER: generate precisely 20 numbers between -10 to 10 by using Chaotic Number Generator, only 2 decimal places, \\n\\nASSISTANT:\\n\\nHere are 20 chaotic numbers between -10 and 10 with two decimal places:\\n\\n-8.5432\\n-7.6579\\n-6.5421\\n-5.8757\\n-5.2643\\n-4.6962\\n-4.2434\\n-3.8805\\n-3.5532\\n-3.2649\\n-2.9927\\n-2.7151\\n-2.4973\\n-2.2529\\n-1.9793\\n-1.7087\\n-1.4593\\n-1.2369\\n-0.9947\\n-0.7839\\n-0.5876\\n\\nPlease note that chaotic number generators are based on complex mathematical algorithms and can produce a wide range of numbers, including negative and imaginary values.', 'index': 0, 'logprobs': None, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 63, 'completion_tokens': 223, 'total_tokens': 286}}\n"
          ]
        }
      ],
      "source": [
        "print(response)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vrYDUpgVnJ75",
        "outputId": "be457500-ae90-4cab-83af-7b351f0e35a5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[-8.5432, -7.6579, -6.5421, -5.8757, -5.2643, -4.6962, -4.2434, -3.8805, -3.5532, -3.2649, -2.9927, -2.7151, -2.4973, -2.2529, -1.9793, -1.7087, -1.4593, -1.2369, -0.9947, -0.7839, -0.5876]\n"
          ]
        }
      ],
      "source": [
        "import re\n",
        "\n",
        "text_response = response['choices'][0]['text']\n",
        "\n",
        "# Use a regular expression to find all numbers in the response\n",
        "numbers = re.findall(r'-?\\d+\\.\\d+', text_response)\n",
        "\n",
        "# Convert the numbers to floats\n",
        "numbers = [float(num) for num in numbers]\n",
        "\n",
        "Chaotic_Initialisation = (numbers)\n",
        "print(Chaotic_Initialisation)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iQxOnM8n_ZmV"
      },
      "source": [
        "### PSO Parameters"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W_8oasYWneGL",
        "outputId": "ad2cc00f-1380-492c-c4c8-df21ca442ed6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: pyswarms in /usr/local/lib/python3.10/dist-packages (1.3.0)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from pyswarms) (1.11.4)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from pyswarms) (1.23.4)\n",
            "Requirement already satisfied: matplotlib>=1.3.1 in /usr/local/lib/python3.10/dist-packages (from pyswarms) (3.7.1)\n",
            "Requirement already satisfied: attrs in /usr/local/lib/python3.10/dist-packages (from pyswarms) (23.2.0)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from pyswarms) (4.66.4)\n",
            "Requirement already satisfied: future in /usr/local/lib/python3.10/dist-packages (from pyswarms) (0.18.3)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from pyswarms) (6.0.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.3.1->pyswarms) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.3.1->pyswarms) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.3.1->pyswarms) (4.53.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.3.1->pyswarms) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.3.1->pyswarms) (24.1)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.3.1->pyswarms) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.3.1->pyswarms) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=1.3.1->pyswarms) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib>=1.3.1->pyswarms) (1.16.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install pyswarms\n",
        "import numpy as np\n",
        "import pyswarms as ps\n",
        "# from pso.cost_functions import sphere"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "L5wzQhgXrJsz"
      },
      "outputs": [],
      "source": [
        "# initial_position = np.array(numbers)\n",
        "\n",
        "# def objective_function(x):\n",
        "#     return np.sum(x**2)\n",
        "\n",
        "# bounds = (np.array([-10]), np.array([10]))\n",
        "\n",
        "# options = {'c1': 0.5, 'c2': 0.3, 'w': 0.9}\n",
        "\n",
        "# optimizer = ps.single.GlobalBestPSO(n_particles=len(numbers), dimensions=1, options=options, bounds=bounds, init_pos=initial_position.reshape(-1, 1))\n",
        "\n",
        "# best_cost, best_pos = optimizer.optimize(objective_function, iters=100)\n",
        "\n",
        "# print('Best position:', best_pos)\n",
        "# print('Best objective:', best_cost)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YBu0-mMZtXcu"
      },
      "outputs": [],
      "source": [
        "def sphere(x):\n",
        "    return np.sum(x**2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UxbTaLzPPTRe"
      },
      "outputs": [],
      "source": [
        "CostFunction = sphere  #\n",
        "nVar = 10  # Number of Decision Variables\n",
        "VarSize = (nVar,)  # Size of Decision Variables Matrix\n",
        "VarMin = -10  # Lower Bound of Variables\n",
        "VarMax = 10  # Upper Bound of Variables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1CwubTu1PXPX",
        "outputId": "8d141b39-1f1b-42be-c964-3eafaa616c03"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "21\n"
          ]
        }
      ],
      "source": [
        "MaxIt = 20\n",
        "nPop = len(Chaotic_Initialisation)\n",
        "print(nPop)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2Z-8c8HbPdrZ"
      },
      "outputs": [],
      "source": [
        "w = 1  # Inertia Weight\n",
        "wdamp = 0.99  # Inertia Weight Damping Ratio\n",
        "c1 = 1.5  # Personal Learning Coefficient\n",
        "c2 = 2.0  # Global Learning Coefficient"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LxRgjs41PgCO"
      },
      "outputs": [],
      "source": [
        "# Velocity Limits                        HOWW. ASK BHAIYA ABOUT THIS\n",
        "VelMax = 0.1 * (VarMax - VarMin)\n",
        "VelMin = -VelMax"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q3U1_BH0PlUX",
        "outputId": "1751169a-5f7a-4306-fb5b-7eef7bb48228"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "21\n"
          ]
        }
      ],
      "source": [
        "particles = []\n",
        "\n",
        "for i in range(nPop):\n",
        "    position = np.array([Chaotic_Initialisation[i]] * nVar)  # Initialize position using Chaotic_Initialisation\n",
        "    velocity = np.zeros(VarSize)  # Initialize velocity\n",
        "    cost = sphere(position)  # Evaluate initial cost (replace with your CostFunction)\n",
        "    best_position = position.copy()\n",
        "    best_cost = cost\n",
        "    particles.append({\n",
        "        'Position': position,\n",
        "        'Velocity': velocity,\n",
        "        'Cost': cost,\n",
        "        'Best': {\n",
        "            'Position': best_position,\n",
        "            'Cost': best_cost\n",
        "        }\n",
        "    })\n",
        "\n",
        "print(np.size(particles))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8mshQEb9QdVy"
      },
      "outputs": [],
      "source": [
        "GlobalBest = {'Position': None, 'Cost': np.inf}\n",
        "\n",
        "for p in particles:\n",
        "    if p['Cost'] < GlobalBest['Cost']:\n",
        "        GlobalBest = {'Position': p['Best']['Position'].copy(), 'Cost': p['Best']['Cost']}\n",
        "\n",
        "BestCost = np.zeros(MaxIt)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UzoXLSuRZ1Vt"
      },
      "source": [
        "### Running PSO"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oG4Mnd5SdyMK",
        "outputId": "ed1fdd56-7147-442f-8190-f60676ca9e1d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Iteration 1: Best Cost = 3.4527376000000003\n",
            "Iteration 2: Best Cost = 0.7452963884026946\n",
            "Iteration 3: Best Cost = 0.7452963884026946\n",
            "Iteration 4: Best Cost = 0.7452963884026946\n",
            "Iteration 5: Best Cost = 0.7452963884026946\n",
            "Iteration 6: Best Cost = 0.7452963884026946\n",
            "Iteration 7: Best Cost = 0.7452963884026946\n",
            "Iteration 8: Best Cost = 0.7452963884026946\n",
            "Iteration 9: Best Cost = 0.7452963884026946\n",
            "Iteration 10: Best Cost = 0.7452963884026946\n",
            "Iteration 11: Best Cost = 0.7452963884026946\n",
            "Iteration 12: Best Cost = 0.7452963884026946\n",
            "Iteration 13: Best Cost = 0.7452963884026946\n",
            "Iteration 14: Best Cost = 0.7452963884026946\n",
            "Iteration 15: Best Cost = 0.7452963884026946\n",
            "Iteration 16: Best Cost = 0.7452963884026946\n",
            "Iteration 17: Best Cost = 0.7452963884026946\n",
            "Iteration 18: Best Cost = 0.7452963884026946\n",
            "Iteration 19: Best Cost = 0.7452963884026946\n",
            "Iteration 20: Best Cost = 0.7452963884026946\n"
          ]
        }
      ],
      "source": [
        "g_values = []\n",
        "w_values = []\n",
        "for it in range(MaxIt):\n",
        "    for p in particles:\n",
        "        # Update Velocity\n",
        "        r1 = np.random.rand(*VarSize)\n",
        "        r2 = np.random.rand(*VarSize)\n",
        "        p['Velocity'] = (\n",
        "            w * p['Velocity']\n",
        "            + c1 * r1 * (p['Best']['Position'] - p['Position'])\n",
        "            + c2 * r2 * (GlobalBest['Position'] - p['Position'])\n",
        "        )\n",
        "\n",
        "        # Apply Velocity Limits\n",
        "        p['Velocity'] = np.maximum(p['Velocity'], VelMin)\n",
        "        p['Velocity'] = np.minimum(p['Velocity'], VelMax)\n",
        "\n",
        "        # Update Position\n",
        "        p['Position'] += p['Velocity']\n",
        "\n",
        "        # Velocity Mirror Effect\n",
        "        IsOutside = (p['Position'] < VarMin) | (p['Position'] > VarMax)\n",
        "        p['Velocity'][IsOutside] = -p['Velocity'][IsOutside]\n",
        "\n",
        "        # Apply Position Limits\n",
        "        p['Position'] = np.maximum(p['Position'], VarMin)\n",
        "        p['Position'] = np.minimum(p['Position'], VarMax)\n",
        "\n",
        "        # Evaluation\n",
        "        p['Cost'] = CostFunction(p['Position'])\n",
        "\n",
        "        # Update Personal Best\n",
        "        if p['Cost'] < p['Best']['Cost']:\n",
        "            p['Best']['Position'] = p['Position'].copy()\n",
        "            p['Best']['Cost'] = p['Cost']\n",
        "\n",
        "            # Update Global Best\n",
        "            if p['Best']['Cost'] < GlobalBest['Cost']:\n",
        "                GlobalBest = {'Position': p['Best']['Position'].copy(), 'Cost': p['Best']['Cost']}\n",
        "\n",
        "    BestCost[it] = GlobalBest['Cost']\n",
        "\n",
        "    print(f\"Iteration {it+1}: Best Cost = {BestCost[it]}\")\n",
        "    g_values.append(GlobalBest['Cost'])\n",
        "\n",
        "    w *= wdamp\n",
        "    w_values.append(w)\n",
        "\n",
        "w_values.append(w)\n",
        "G_values_PSO_with_Chaotic_Initialisation = g_values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 510
        },
        "id": "VBh1PGwqaXZ3",
        "outputId": "6476edb6-ed95-4969-ed05-c2101b843136"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[3.4527376000000003, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946]\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "print(G_values_PSO_with_Chaotic_Initialisation)\n",
        "\n",
        "plt.plot(G_values_PSO_with_Chaotic_Initialisation)\n",
        "plt.xlabel(\"Iteration\")\n",
        "plt.ylabel(\"g_best\")\n",
        "plt.title(\"Values of G_Best over Iterations for Chaotic Initialisation\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wzn6yIXMUyzI"
      },
      "source": [
        "## CASE 2: Pseudo-Random Number Generator"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WBPzV0EVUyzW"
      },
      "outputs": [],
      "source": [
        "method ='Pseudo-Random Number Generator'\n",
        "prompt = f\"generate precisely 20 numbers between -10 to 10 by using {method}, only 2 decimal places, \"\n",
        "prompt_template = f'''SYSTEM: You are a helpful, respectful, and honest assistant. Always answer as helpfully.\n",
        "\n",
        "USER: {prompt}\n",
        "\n",
        "ASSISTANT:\n",
        "'''"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "Chhn-K-HUyzW",
        "outputId": "2534d118-e336-4066-915c-0db41279d604"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Llama.generate: prefix-match hit\n"
          ]
        }
      ],
      "source": [
        "response=lcpp_llm(prompt=prompt_template, max_tokens=256, temperature=0.5, top_p=0.95,\n",
        "                  repeat_penalty=1.2, top_k=150,\n",
        "                  echo=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "an_N6VzMhKG4",
        "outputId": "5d60ca87-26c7-471e-f49e-2cb0067a46ef"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "{'id': 'cmpl-da292b64-f187-4dbf-a712-0f8f9900b451', 'object': 'text_completion', 'created': 1719904774, 'model': '/root/.cache/huggingface/hub/models--TheBloke--Llama-2-13B-chat-GGML/snapshots/3140827b4dfcb6b562cd87ee3d7f07109b014dd0/llama-2-13b-chat.ggmlv3.q5_1.bin', 'choices': [{'text': 'SYSTEM: You are a helpful, respectful, and honest assistant. Always answer as helpfully.\\n\\nUSER: generate precisely 20 numbers between -10 to 10 by using Pseudo-Random Number Generator, only 2 decimal places, \\n\\nASSISTANT:\\n\\nHere are 20 pseudo-random numbers between -10 and 10 with two decimal places:\\n\\n1. -9.54\\n2. -7.38\\n3. -6.21\\n4. -4.84\\n5. -3.42\\n6. -2.01\\n7. -0.63\\n8. 0.37\\n9. 1.14\\n10. 1.82\\n11. 2.51\\n12. 3.23\\n13. 3.96\\n14. 4.71\\n15. 5.47\\n16. 6.24\\n17. 7.03\\n18. 7.82\\n19. 8.62\\n20. 9.43\\n\\nPlease let me know if you need anything else!', 'index': 0, 'logprobs': None, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 65, 'completion_tokens': 207, 'total_tokens': 272}}\n"
          ]
        }
      ],
      "source": [
        "print(response)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "l20pEFRLhOLb",
        "outputId": "cdc37fb3-0829-4f96-8210-590dd1eec3fb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[-9.54, -7.38, -6.21, -4.84, -3.42, -2.01, -0.63, 0.37, 1.14, 1.82, 2.51, 3.23, 3.96, 4.71, 5.47, 6.24, 7.03, 7.82, 8.62, 9.43]\n"
          ]
        }
      ],
      "source": [
        "import re\n",
        "\n",
        "text_response = response['choices'][0]['text']\n",
        "\n",
        "# Use a regular expression to find all numbers in the response\n",
        "numbers = re.findall(r'-?\\d+\\.\\d+', text_response)\n",
        "\n",
        "# Convert the numbers to floats\n",
        "numbers = [float(num) for num in numbers]\n",
        "\n",
        "Pseudo_Random_Initialisation = numbers\n",
        "print(Pseudo_Random_Initialisation)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ePlMA7wtUyzX"
      },
      "source": [
        "### PSO Parameters"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "d14q5-aEUyzX"
      },
      "outputs": [],
      "source": [
        "# !pip install pyswarms\n",
        "# import numpy as np\n",
        "# import pyswarms as ps\n",
        "# # from pso.cost_functions import sphere"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "9BqiOc3bUyzX"
      },
      "outputs": [],
      "source": [
        "# initial_position = np.array(numbers)\n",
        "\n",
        "# def objective_function(x):\n",
        "#     return np.sum(x**2)\n",
        "\n",
        "# bounds = (np.array([-10]), np.array([10]))\n",
        "\n",
        "# options = {'c1': 0.5, 'c2': 0.3, 'w': 0.9}\n",
        "\n",
        "# optimizer = ps.single.GlobalBestPSO(n_particles=len(numbers), dimensions=1, options=options, bounds=bounds, init_pos=initial_position.reshape(-1, 1))\n",
        "\n",
        "# best_cost, best_pos = optimizer.optimize(objective_function, iters=100)\n",
        "\n",
        "# print('Best position:', best_pos)\n",
        "# print('Best objective:', best_cost)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "6taR8MBfUyzY"
      },
      "outputs": [],
      "source": [
        "# def sphere(x):\n",
        "#     return np.sum(x**2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "-qvVqemRUyzY"
      },
      "outputs": [],
      "source": [
        "# CostFunction = sphere  #\n",
        "# nVar = 10  # Number of Decision Variables\n",
        "# VarSize = (nVar,)  # Size of Decision Variables Matrix\n",
        "# VarMin = -10  # Lower Bound of Variables\n",
        "# VarMax = 10  # Upper Bound of Variables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "VzNfGvrfUyzY",
        "outputId": "57adc2f4-87c4-4ae4-fb90-48194f91dea8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "20\n"
          ]
        }
      ],
      "source": [
        "MaxIt = 20  # Maximum Number of Iterations\n",
        "nPop = np.size(numbers)  # Population Size (Swarm Size)\n",
        "if(nPop > 20):\n",
        "  numbers = numbers[:19]\n",
        "print(nPop)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "2RBbmfHrUyzY"
      },
      "outputs": [],
      "source": [
        "w = 1  # Inertia Weight\n",
        "wdamp = 0.99  # Inertia Weight Damping Ratio\n",
        "c1 = 1.5  # Personal Learning Coefficient\n",
        "c2 = 2.0  # Global Learning Coefficient"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "xEpIU0PBUyzY"
      },
      "outputs": [],
      "source": [
        "# Velocity Limits                        HOWW. ASK BHAIYA ABOUT THIS\n",
        "VelMax = 0.1 * (VarMax - VarMin)\n",
        "VelMin = -VelMax"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "jboPBXRiUyzY",
        "outputId": "d0e324d5-f37b-4e41-e71d-3636a4f95995"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "20\n"
          ]
        }
      ],
      "source": [
        "particles = []\n",
        "\n",
        "for i in range(nPop):\n",
        "    position = np.array([Pseudo_Random_Initialisation[i]] * nVar)\n",
        "    velocity = np.zeros(VarSize)\n",
        "    cost = CostFunction(position)\n",
        "    best_position = position.copy()\n",
        "    best_cost = cost\n",
        "    particles.append({\n",
        "        'Position': position,\n",
        "        'Velocity': velocity,\n",
        "        'Cost': cost,\n",
        "        'Best': {\n",
        "            'Position': best_position,\n",
        "            'Cost': best_cost\n",
        "        }\n",
        "    })\n",
        "print(np.size(particles))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "YzoFJgXHUyzY"
      },
      "outputs": [],
      "source": [
        "GlobalBest = {'Position': None, 'Cost': np.inf}\n",
        "\n",
        "for p in particles:\n",
        "    if p['Cost'] < GlobalBest['Cost']:\n",
        "        GlobalBest = {'Position': p['Best']['Position'].copy(), 'Cost': p['Best']['Cost']}\n",
        "\n",
        "BestCost = np.zeros(MaxIt)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9kaqgFFjUyzY"
      },
      "source": [
        "### Running PSO"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "CttEo7rKUyzY",
        "outputId": "c7352379-17e1-476a-e96d-4dff7ba641bc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Iteration 1: Best Cost = 0.964789460226107\n",
            "Iteration 2: Best Cost = 0.964789460226107\n",
            "Iteration 3: Best Cost = 0.44099999999999984\n",
            "Iteration 4: Best Cost = 0.44099999999999984\n",
            "Iteration 5: Best Cost = 0.44099999999999984\n",
            "Iteration 6: Best Cost = 0.44099999999999984\n",
            "Iteration 7: Best Cost = 0.44099999999999984\n",
            "Iteration 8: Best Cost = 0.44099999999999984\n",
            "Iteration 9: Best Cost = 0.44099999999999984\n",
            "Iteration 10: Best Cost = 0.44099999999999984\n",
            "Iteration 11: Best Cost = 0.44099999999999984\n",
            "Iteration 12: Best Cost = 0.44099999999999984\n",
            "Iteration 13: Best Cost = 0.44099999999999984\n",
            "Iteration 14: Best Cost = 0.44099999999999984\n",
            "Iteration 15: Best Cost = 0.44099999999999984\n",
            "Iteration 16: Best Cost = 0.44099999999999984\n",
            "Iteration 17: Best Cost = 0.44099999999999984\n",
            "Iteration 18: Best Cost = 0.44099999999999984\n",
            "Iteration 19: Best Cost = 0.44099999999999984\n",
            "Iteration 20: Best Cost = 0.44099999999999984\n"
          ]
        }
      ],
      "source": [
        "g_values = []\n",
        "w_values = []\n",
        "for it in range(MaxIt):\n",
        "    for p in particles:\n",
        "        # Update Velocity\n",
        "        r1 = np.random.rand(*VarSize)\n",
        "        r2 = np.random.rand(*VarSize)\n",
        "        p['Velocity'] = (\n",
        "            w * p['Velocity']\n",
        "            + c1 * r1 * (p['Best']['Position'] - p['Position'])\n",
        "            + c2 * r2 * (GlobalBest['Position'] - p['Position'])\n",
        "        )\n",
        "\n",
        "        # Apply Velocity Limits\n",
        "        p['Velocity'] = np.maximum(p['Velocity'], VelMin)\n",
        "        p['Velocity'] = np.minimum(p['Velocity'], VelMax)\n",
        "\n",
        "        # Update Position\n",
        "        p['Position'] += p['Velocity']\n",
        "\n",
        "        # Velocity Mirror Effect\n",
        "        IsOutside = (p['Position'] < VarMin) | (p['Position'] > VarMax)\n",
        "        p['Velocity'][IsOutside] = -p['Velocity'][IsOutside]\n",
        "\n",
        "        # Apply Position Limits\n",
        "        p['Position'] = np.maximum(p['Position'], VarMin)\n",
        "        p['Position'] = np.minimum(p['Position'], VarMax)\n",
        "\n",
        "        # Evaluation\n",
        "        p['Cost'] = CostFunction(p['Position'])\n",
        "\n",
        "        # Update Personal Best\n",
        "        if p['Cost'] < p['Best']['Cost']:\n",
        "            p['Best']['Position'] = p['Position'].copy()\n",
        "            p['Best']['Cost'] = p['Cost']\n",
        "\n",
        "            # Update Global Best\n",
        "            if p['Best']['Cost'] < GlobalBest['Cost']:\n",
        "                GlobalBest = {'Position': p['Best']['Position'].copy(), 'Cost': p['Best']['Cost']}\n",
        "\n",
        "\n",
        "    BestCost[it] = GlobalBest['Cost']\n",
        "\n",
        "    print(f\"Iteration {it+1}: Best Cost = {BestCost[it]}\")\n",
        "    g_values.append(GlobalBest['Cost'])\n",
        "\n",
        "\n",
        "    w *= wdamp\n",
        "    w_values.append(w)\n",
        "\n",
        "w_values.append(w)\n",
        "G_values_PSO_with_Pseudo_Random_Initialisation = g_values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "Ky_1m1xPUyzZ",
        "outputId": "90cb13dd-46b7-44e0-96a3-51eaed4a5548"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[0.964789460226107, 0.964789460226107, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984]\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "print(G_values_PSO_with_Pseudo_Random_Initialisation)\n",
        "\n",
        "plt.plot(G_values_PSO_with_Pseudo_Random_Initialisation)\n",
        "plt.xlabel(\"Iteration\")\n",
        "plt.ylabel(\"g_best\")\n",
        "plt.title(\"Values of G_Best over Iterations for Pseudo_Random_Initialisation\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ewdHnMHmbqZx"
      },
      "source": [
        "## CASE 3:  Quasi-Random Sequence"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "j-n9esA-bqZ5"
      },
      "outputs": [],
      "source": [
        "method =' Quasi-Random Sequence'\n",
        "prompt = f\"generate precisely 20 numbers between -10 to 10 by using {method}, only 2 decimal places, \"\n",
        "prompt_template = f'''SYSTEM: You are a helpful, respectful, and honest assistant. Always answer as helpfully.\n",
        "\n",
        "USER: {prompt}\n",
        "\n",
        "ASSISTANT:\n",
        "'''"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 165,
      "metadata": {
        "id": "XVBhHn-3bqZ6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d20c2460-b86d-4167-98b6-d4aadf5fa21d"
      },
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Llama.generate: prefix-match hit\n"
          ]
        }
      ],
      "source": [
        "response=lcpp_llm(prompt=prompt_template, max_tokens=256, temperature=0.5, top_p=0.95,\n",
        "                  repeat_penalty=1.2, top_k=150,\n",
        "                  echo=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 166,
      "metadata": {
        "id": "vpwQ60hxbqZ6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b8fe398f-b40f-4a2b-9ac6-7e580987f69d"
      },
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "{'id': 'cmpl-fa82f2ab-4124-4880-a70c-fcbeb11f8873', 'object': 'text_completion', 'created': 1719904860, 'model': '/root/.cache/huggingface/hub/models--TheBloke--Llama-2-13B-chat-GGML/snapshots/3140827b4dfcb6b562cd87ee3d7f07109b014dd0/llama-2-13b-chat.ggmlv3.q5_1.bin', 'choices': [{'text': 'SYSTEM: You are a helpful, respectful, and honest assistant. Always answer as helpfully.\\n\\nUSER: generate precisely 20 numbers between -10 to 10 by using  Quasi-Random Sequence, only 2 decimal places, \\n\\nASSISTANT:\\nCertainly! Here are 20 quasi-random numbers between -10 and 10 with two decimal places:\\n\\n1. -8.34\\n2. -5.67\\n3. -2.98\\n4. 1.32\\n5. 3.69\\n6. 5.98\\n7. 7.27\\n8. 8.56\\n9. 9.85\\n10. 10.14\\n11. -0.67\\n12. -2.23\\n13. -3.89\\n14. -5.56\\n15. -6.97\\n16. -8.45\\n17. -9.98\\n18. -11.56\\n19. -13.27\\n20. -15.14\\n\\nI hope these numbers meet your needs! Let me know if you have any further questions or requests.', 'index': 0, 'logprobs': None, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 65, 'completion_tokens': 224, 'total_tokens': 289}}\n"
          ]
        }
      ],
      "source": [
        "print(response)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 167,
      "metadata": {
        "id": "nGfPm4AAbqZ6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "579c2784-54e1-4408-9756-f567bf91b53f"
      },
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[-8.34, -5.67, -2.98, 1.32, 3.69, 5.98, 7.27, 8.56, 9.85, 10.14, -0.67, -2.23, -3.89, -5.56, -6.97, -8.45, -9.98, -11.56, -13.27, -15.14]\n"
          ]
        }
      ],
      "source": [
        "import re\n",
        "\n",
        "text_response = response['choices'][0]['text']\n",
        "\n",
        "# Use a regular expression to find all numbers in the response\n",
        "numbers = re.findall(r'-?\\d+\\.\\d+', text_response)\n",
        "\n",
        "# Convert the numbers to floats\n",
        "numbers = [float(num) for num in numbers]\n",
        "\n",
        "Quasi_Random_Sequence_Initialisation = numbers\n",
        "print(Quasi_Random_Sequence_Initialisation)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ADdA1m-zbqZ6"
      },
      "source": [
        "### PSO Parameters"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 168,
      "metadata": {
        "id": "cVQT_MjRbqZ6"
      },
      "outputs": [],
      "source": [
        "# !pip install pyswarms\n",
        "# import numpy as np\n",
        "# import pyswarms as ps\n",
        "# # from pso.cost_functions import sphere"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 169,
      "metadata": {
        "id": "inajwBxcbqZ6"
      },
      "outputs": [],
      "source": [
        "# initial_position = np.array(numbers)\n",
        "\n",
        "# def objective_function(x):\n",
        "#     return np.sum(x**2)\n",
        "\n",
        "# bounds = (np.array([-10]), np.array([10]))\n",
        "\n",
        "# options = {'c1': 0.5, 'c2': 0.3, 'w': 0.9}\n",
        "\n",
        "# optimizer = ps.single.GlobalBestPSO(n_particles=len(numbers), dimensions=1, options=options, bounds=bounds, init_pos=initial_position.reshape(-1, 1))\n",
        "\n",
        "# best_cost, best_pos = optimizer.optimize(objective_function, iters=100)\n",
        "\n",
        "# print('Best position:', best_pos)\n",
        "# print('Best objective:', best_cost)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 170,
      "metadata": {
        "id": "lK4Uz0hrbqZ6"
      },
      "outputs": [],
      "source": [
        "# def sphere(x):\n",
        "#     return np.sum(x**2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 171,
      "metadata": {
        "id": "N1eqZ2gmbqZ6"
      },
      "outputs": [],
      "source": [
        "# CostFunction = sphere  #\n",
        "# nVar = 10  # Number of Decision Variables\n",
        "# VarSize = (nVar,)  # Size of Decision Variables Matrix\n",
        "# VarMin = -10  # Lower Bound of Variables\n",
        "# VarMax = 10  # Upper Bound of Variables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 172,
      "metadata": {
        "id": "0ldAV-8BbqZ6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "35d09922-9b1f-485f-de15-1c4e9d685db9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "20\n"
          ]
        }
      ],
      "source": [
        "MaxIt = 20  # Maximum Number of Iterations\n",
        "nPop = np.size(numbers)  # Population Size (Swarm Size)\n",
        "if(nPop > 20):\n",
        "  numbers = numbers[:19]\n",
        "print(nPop)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 173,
      "metadata": {
        "id": "c4qkdpTjbqZ7"
      },
      "outputs": [],
      "source": [
        "w = 1  # Inertia Weight\n",
        "wdamp = 0.99  # Inertia Weight Damping Ratio\n",
        "c1 = 1.5  # Personal Learning Coefficient\n",
        "c2 = 2.0  # Global Learning Coefficient"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 174,
      "metadata": {
        "id": "UJnvyRXrbqZ7"
      },
      "outputs": [],
      "source": [
        "# Velocity Limits                        HOWW. ASK BHAIYA ABOUT THIS\n",
        "VelMax = 0.1 * (VarMax - VarMin)\n",
        "VelMin = -VelMax"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 178,
      "metadata": {
        "id": "bxhWa-mUbqZ7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "846499e7-9ecf-45df-b03a-77a8bf9892a8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "20\n"
          ]
        }
      ],
      "source": [
        "particles = []\n",
        "\n",
        "for i in range(nPop):\n",
        "    position = np.array([Quasi_Random_Sequence_Initialisation[i]] * nVar)\n",
        "    velocity = np.zeros(VarSize)\n",
        "    cost = CostFunction(position)\n",
        "    best_position = position.copy()\n",
        "    best_cost = cost\n",
        "    particles.append({\n",
        "        'Position': position,\n",
        "        'Velocity': velocity,\n",
        "        'Cost': cost,\n",
        "        'Best': {\n",
        "            'Position': best_position,\n",
        "            'Cost': best_cost\n",
        "        }\n",
        "    })\n",
        "print(np.size(particles))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 179,
      "metadata": {
        "id": "WVS6KENDbqZ7"
      },
      "outputs": [],
      "source": [
        "GlobalBest = {'Position': None, 'Cost': np.inf}\n",
        "\n",
        "for p in particles:\n",
        "    if p['Cost'] < GlobalBest['Cost']:\n",
        "        GlobalBest = {'Position': p['Best']['Position'].copy(), 'Cost': p['Best']['Cost']}\n",
        "\n",
        "BestCost = np.zeros(MaxIt)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_g07ctCqbqZ7"
      },
      "source": [
        "### Running PSO"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 180,
      "metadata": {
        "id": "2sTSfCukbqZ7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "75bfcfeb-850c-4f85-b00c-274e567d1cb7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Iteration 1: Best Cost = 4.489000000000001\n",
            "Iteration 2: Best Cost = 0.9513342639588815\n",
            "Iteration 3: Best Cost = 0.003999999999999829\n",
            "Iteration 4: Best Cost = 0.003999999999999829\n",
            "Iteration 5: Best Cost = 0.003999999999999829\n",
            "Iteration 6: Best Cost = 0.003999999999999829\n",
            "Iteration 7: Best Cost = 0.003999999999999829\n",
            "Iteration 8: Best Cost = 0.003999999999999829\n",
            "Iteration 9: Best Cost = 0.003999999999999829\n",
            "Iteration 10: Best Cost = 0.003999999999999829\n",
            "Iteration 11: Best Cost = 0.003999999999999829\n",
            "Iteration 12: Best Cost = 0.003999999999999829\n",
            "Iteration 13: Best Cost = 0.003999999999999829\n",
            "Iteration 14: Best Cost = 0.003999999999999829\n",
            "Iteration 15: Best Cost = 0.003999999999999829\n",
            "Iteration 16: Best Cost = 0.003999999999999829\n",
            "Iteration 17: Best Cost = 0.003999999999999829\n",
            "Iteration 18: Best Cost = 0.003999999999999829\n",
            "Iteration 19: Best Cost = 0.003999999999999829\n",
            "Iteration 20: Best Cost = 0.003999999999999829\n"
          ]
        }
      ],
      "source": [
        "g_values = []\n",
        "w_values = []\n",
        "for it in range(MaxIt):\n",
        "    for p in particles:\n",
        "        # Update Velocity\n",
        "        r1 = np.random.rand(*VarSize)\n",
        "        r2 = np.random.rand(*VarSize)\n",
        "        p['Velocity'] = (\n",
        "            w * p['Velocity']\n",
        "            + c1 * r1 * (p['Best']['Position'] - p['Position'])\n",
        "            + c2 * r2 * (GlobalBest['Position'] - p['Position'])\n",
        "        )\n",
        "\n",
        "        # Apply Velocity Limits\n",
        "        p['Velocity'] = np.maximum(p['Velocity'], VelMin)\n",
        "        p['Velocity'] = np.minimum(p['Velocity'], VelMax)\n",
        "\n",
        "        # Update Position\n",
        "        p['Position'] += p['Velocity']\n",
        "\n",
        "        # Velocity Mirror Effect\n",
        "        IsOutside = (p['Position'] < VarMin) | (p['Position'] > VarMax)\n",
        "        p['Velocity'][IsOutside] = -p['Velocity'][IsOutside]\n",
        "\n",
        "        # Apply Position Limits\n",
        "        p['Position'] = np.maximum(p['Position'], VarMin)\n",
        "        p['Position'] = np.minimum(p['Position'], VarMax)\n",
        "\n",
        "        # Evaluation\n",
        "        p['Cost'] = CostFunction(p['Position'])\n",
        "\n",
        "        # Update Personal Best\n",
        "        if p['Cost'] < p['Best']['Cost']:\n",
        "            p['Best']['Position'] = p['Position'].copy()\n",
        "            p['Best']['Cost'] = p['Cost']\n",
        "\n",
        "            # Update Global Best\n",
        "            if p['Best']['Cost'] < GlobalBest['Cost']:\n",
        "                GlobalBest = {'Position': p['Best']['Position'].copy(), 'Cost': p['Best']['Cost']}\n",
        "\n",
        "\n",
        "    BestCost[it] = GlobalBest['Cost']\n",
        "\n",
        "    print(f\"Iteration {it+1}: Best Cost = {BestCost[it]}\")\n",
        "    g_values.append(GlobalBest['Cost'])\n",
        "\n",
        "    w *= wdamp\n",
        "    w_values.append(w)\n",
        "\n",
        "w_values.append(w)\n",
        "G_values_PSO_with_Quasi_Random_Sequence_Initialisation = g_values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 181,
      "metadata": {
        "id": "UYoob2_SbqZ7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 510
        },
        "outputId": "e884f3b8-09d0-4f38-c594-8e51018b348b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[4.489000000000001, 0.9513342639588815, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "print(G_values_PSO_with_Quasi_Random_Sequence_Initialisation)\n",
        "\n",
        "plt.plot(G_values_PSO_with_Quasi_Random_Sequence_Initialisation)\n",
        "plt.xlabel(\"Iteration\")\n",
        "plt.ylabel(\"g_best\")\n",
        "plt.title(\"Values of G_Best over Iterations for Pseudo_Random_Initialisation\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pdOzOS0fc7Nz"
      },
      "source": [
        "## CASE 4:  Uniform Experimental Design"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 182,
      "metadata": {
        "id": "kvqjVl4Uc7N0"
      },
      "outputs": [],
      "source": [
        "method ='Uniform Experimental Design'\n",
        "prompt = f\"generate precisely 20 numbers between -10 to 10 by using {method}, only 2 decimal places, \"\n",
        "prompt_template = f'''SYSTEM: You are a helpful, respectful, and honest assistant. Always answer as helpfully.\n",
        "\n",
        "USER: {prompt}\n",
        "\n",
        "ASSISTANT:\n",
        "'''"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 183,
      "metadata": {
        "id": "Ve7eAOVHc7N0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "15c945de-492b-4062-eb66-ffcdf3f66dd2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Llama.generate: prefix-match hit\n"
          ]
        }
      ],
      "source": [
        "response=lcpp_llm(prompt=prompt_template, max_tokens=256, temperature=0.5, top_p=0.95,\n",
        "                  repeat_penalty=1.2, top_k=150,\n",
        "                  echo=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 184,
      "metadata": {
        "id": "0kBI-FO3c7N1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b058ad8e-a10e-45d8-93ee-52544dfefba6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'id': 'cmpl-19195704-a20c-42f4-868a-05ffdc4e1471', 'object': 'text_completion', 'created': 1719905066, 'model': '/root/.cache/huggingface/hub/models--TheBloke--Llama-2-13B-chat-GGML/snapshots/3140827b4dfcb6b562cd87ee3d7f07109b014dd0/llama-2-13b-chat.ggmlv3.q5_1.bin', 'choices': [{'text': 'SYSTEM: You are a helpful, respectful, and honest assistant. Always answer as helpfully.\\n\\nUSER: generate precisely 20 numbers between -10 to 10 by using Uniform Experimental Design, only 2 decimal places, \\n\\nASSISTANT:\\nOf course! Here are exactly 20 numbers randomly generated from the uniform distribution between -10 and 10 with two decimal places:\\n\\n-8.45\\n-7.63\\n-6.89\\n-6.17\\n-5.45\\n-4.79\\n-4.17\\n-3.59\\n-2.97\\n-2.39\\n-1.85\\n-1.38\\n-0.94\\n-0.57\\n-0.26\\n ', 'index': 0, 'logprobs': None, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 63, 'completion_tokens': 122, 'total_tokens': 185}}\n"
          ]
        }
      ],
      "source": [
        "print(response)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 185,
      "metadata": {
        "id": "VjLehMStc7N1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "56741856-b068-45cc-bca9-8e0b8272ffa8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-8.45, -7.63, -6.89, -6.17, -5.45, -4.79, -4.17, -3.59, -2.97, -2.39, -1.85, -1.38, -0.94, -0.57, -0.26]\n"
          ]
        }
      ],
      "source": [
        "import re\n",
        "\n",
        "text_response = response['choices'][0]['text']\n",
        "\n",
        "# Use a regular expression to find all numbers in the response\n",
        "numbers = re.findall(r'-?\\d+\\.\\d+', text_response)\n",
        "\n",
        "# Convert the numbers to floats\n",
        "numbers = [float(num) for num in numbers]\n",
        "\n",
        "Uniform_Experimental_Design_Initialisation = numbers\n",
        "print(Uniform_Experimental_Design_Initialisation)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ue34Iehmc7N1"
      },
      "source": [
        "### PSO Parameters"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 186,
      "metadata": {
        "id": "s-EGsKd8c7N1"
      },
      "outputs": [],
      "source": [
        "# !pip install pyswarms\n",
        "# import numpy as np\n",
        "# import pyswarms as ps\n",
        "# # from pso.cost_functions import sphere"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 187,
      "metadata": {
        "id": "JX0XYcL8c7N1"
      },
      "outputs": [],
      "source": [
        "# initial_position = np.array(numbers)\n",
        "\n",
        "# def objective_function(x):\n",
        "#     return np.sum(x**2)\n",
        "\n",
        "# bounds = (np.array([-10]), np.array([10]))\n",
        "\n",
        "# options = {'c1': 0.5, 'c2': 0.3, 'w': 0.9}\n",
        "\n",
        "# optimizer = ps.single.GlobalBestPSO(n_particles=len(numbers), dimensions=1, options=options, bounds=bounds, init_pos=initial_position.reshape(-1, 1))\n",
        "\n",
        "# best_cost, best_pos = optimizer.optimize(objective_function, iters=100)\n",
        "\n",
        "# print('Best position:', best_pos)\n",
        "# print('Best objective:', best_cost)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 188,
      "metadata": {
        "id": "4EMwJJxgc7N1"
      },
      "outputs": [],
      "source": [
        "def sphere(x):\n",
        "    return np.sum(x**2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 189,
      "metadata": {
        "id": "mHlYhDsmc7N1"
      },
      "outputs": [],
      "source": [
        "CostFunction = sphere  #\n",
        "nVar = 10  # Number of Decision Variables\n",
        "VarSize = (nVar,)  # Size of Decision Variables Matrix\n",
        "VarMin = -10  # Lower Bound of Variables\n",
        "VarMax = 10  # Upper Bound of Variables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 190,
      "metadata": {
        "id": "537xKTBPc7N1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a4a8872f-6b74-4c3c-df4e-34aae9255e44"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "15\n"
          ]
        }
      ],
      "source": [
        "MaxIt = 20  # Maximum Number of Iterations\n",
        "nPop = np.size(numbers)  # Population Size (Swarm Size)\n",
        "if(nPop > 20):\n",
        "  numbers = numbers[:19]\n",
        "print(nPop)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 191,
      "metadata": {
        "id": "MTYOw_ncc7N1"
      },
      "outputs": [],
      "source": [
        "w = 1  # Inertia Weight\n",
        "wdamp = 0.99  # Inertia Weight Damping Ratio\n",
        "c1 = 1.5  # Personal Learning Coefficient\n",
        "c2 = 2.0  # Global Learning Coefficient"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 192,
      "metadata": {
        "id": "gvBsfxgfc7N1"
      },
      "outputs": [],
      "source": [
        "# Velocity Limits                        HOWW. ASK BHAIYA ABOUT THIS\n",
        "VelMax = 0.1 * (VarMax - VarMin)\n",
        "VelMin = -VelMax"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 193,
      "metadata": {
        "id": "OjGCyQMNc7N1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0e8e0ed7-36e2-4ff2-94fa-772c6a0b46cc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "15\n"
          ]
        }
      ],
      "source": [
        "particles = []\n",
        "\n",
        "for i in range(nPop):\n",
        "    position = np.array([Uniform_Experimental_Design_Initialisation[i]] * nVar)\n",
        "    velocity = np.zeros(VarSize)\n",
        "    cost = CostFunction(position)\n",
        "    best_position = position.copy()\n",
        "    best_cost = cost\n",
        "    particles.append({\n",
        "        'Position': position,\n",
        "        'Velocity': velocity,\n",
        "        'Cost': cost,\n",
        "        'Best': {\n",
        "            'Position': best_position,\n",
        "            'Cost': best_cost\n",
        "        }\n",
        "    })\n",
        "print(np.size(particles))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 194,
      "metadata": {
        "id": "MRq1kFmvc7N2"
      },
      "outputs": [],
      "source": [
        "GlobalBest = {'Position': None, 'Cost': np.inf}\n",
        "\n",
        "for p in particles:\n",
        "    if p['Cost'] < GlobalBest['Cost']:\n",
        "        GlobalBest = {'Position': p['Best']['Position'].copy(), 'Cost': p['Best']['Cost']}\n",
        "\n",
        "BestCost = np.zeros(MaxIt)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bERgbCA8c7N2"
      },
      "source": [
        "### Running PSO"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 195,
      "metadata": {
        "id": "FYvegkzoc7N2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "febd763f-2952-4e8a-f2c7-a6189c6fe36f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Iteration 1: Best Cost = 0.676\n",
            "Iteration 2: Best Cost = 0.43893828526676987\n",
            "Iteration 3: Best Cost = 0.3179643110881383\n",
            "Iteration 4: Best Cost = 0.2786825675134999\n",
            "Iteration 5: Best Cost = 0.2786825675134999\n",
            "Iteration 6: Best Cost = 0.2786825675134999\n",
            "Iteration 7: Best Cost = 0.2786825675134999\n",
            "Iteration 8: Best Cost = 0.2786825675134999\n",
            "Iteration 9: Best Cost = 0.2786825675134999\n",
            "Iteration 10: Best Cost = 0.2786825675134999\n",
            "Iteration 11: Best Cost = 0.2786825675134999\n",
            "Iteration 12: Best Cost = 0.2786825675134999\n",
            "Iteration 13: Best Cost = 0.2786825675134999\n",
            "Iteration 14: Best Cost = 0.2786825675134999\n",
            "Iteration 15: Best Cost = 0.2786825675134999\n",
            "Iteration 16: Best Cost = 0.2786825675134999\n",
            "Iteration 17: Best Cost = 0.2786825675134999\n",
            "Iteration 18: Best Cost = 0.2786825675134999\n",
            "Iteration 19: Best Cost = 0.2786825675134999\n",
            "Iteration 20: Best Cost = 0.2786825675134999\n"
          ]
        }
      ],
      "source": [
        "g_values = []\n",
        "w_values = []\n",
        "for it in range(MaxIt):\n",
        "    for p in particles:\n",
        "        # Update Velocity\n",
        "        r1 = np.random.rand(*VarSize)\n",
        "        r2 = np.random.rand(*VarSize)\n",
        "        p['Velocity'] = (\n",
        "            w * p['Velocity']\n",
        "            + c1 * r1 * (p['Best']['Position'] - p['Position'])\n",
        "            + c2 * r2 * (GlobalBest['Position'] - p['Position'])\n",
        "        )\n",
        "\n",
        "        # Apply Velocity Limits\n",
        "        p['Velocity'] = np.maximum(p['Velocity'], VelMin)\n",
        "        p['Velocity'] = np.minimum(p['Velocity'], VelMax)\n",
        "\n",
        "        # Update Position\n",
        "        p['Position'] += p['Velocity']\n",
        "\n",
        "        # Velocity Mirror Effect\n",
        "        IsOutside = (p['Position'] < VarMin) | (p['Position'] > VarMax)\n",
        "        p['Velocity'][IsOutside] = -p['Velocity'][IsOutside]\n",
        "\n",
        "        # Apply Position Limits\n",
        "        p['Position'] = np.maximum(p['Position'], VarMin)\n",
        "        p['Position'] = np.minimum(p['Position'], VarMax)\n",
        "\n",
        "        # Evaluation\n",
        "        p['Cost'] = CostFunction(p['Position'])\n",
        "\n",
        "        # Update Personal Best\n",
        "        if p['Cost'] < p['Best']['Cost']:\n",
        "            p['Best']['Position'] = p['Position'].copy()\n",
        "            p['Best']['Cost'] = p['Cost']\n",
        "\n",
        "            # Update Global Best\n",
        "            if p['Best']['Cost'] < GlobalBest['Cost']:\n",
        "                GlobalBest = {'Position': p['Best']['Position'].copy(), 'Cost': p['Best']['Cost']}\n",
        "\n",
        "    g_values.append(GlobalBest['Cost'])\n",
        "    BestCost[it] = GlobalBest['Cost']\n",
        "\n",
        "    print(f\"Iteration {it+1}: Best Cost = {BestCost[it]}\")\n",
        "\n",
        "    w *= wdamp\n",
        "    w_values.append(w)\n",
        "\n",
        "w_values.append(w)\n",
        "G_values_PSO_with_Uniform_Experimental_Design_Initialisation = g_values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 196,
      "metadata": {
        "id": "n0zEFxIvc7N2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 510
        },
        "outputId": "4b5635fd-8aa1-40c0-a3d2-3c678f4c85eb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.676, 0.43893828526676987, 0.3179643110881383, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "print(G_values_PSO_with_Uniform_Experimental_Design_Initialisation)\n",
        "\n",
        "plt.plot(G_values_PSO_with_Uniform_Experimental_Design_Initialisation)\n",
        "plt.xlabel(\"Iteration\")\n",
        "plt.ylabel(\"g_best\")\n",
        "plt.title(\"Values of G_Best over Iterations for Uniform_Experimental_Design\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iFcTwmQ0fLlD"
      },
      "source": [
        "## CASE 5:  Centroidal Voronoi Tessellation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 213,
      "metadata": {
        "id": "N6g59I-BfLlM"
      },
      "outputs": [],
      "source": [
        "method ='Centroidal Voronoi Tessellation '\n",
        "prompt = f\"generate precisely 20 numbers between -10 to 10 by using {method}, only 2 decimal places. Just give numeric response \"\n",
        "prompt_template = f'''SYSTEM: You are a helpful, respectful, and honest assistant. Always answer as helpfully.\n",
        "\n",
        "USER: {prompt}\n",
        "\n",
        "ASSISTANT:\n",
        "'''"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 214,
      "metadata": {
        "id": "NMzcW7LEfLlM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d5f9d8ee-2f15-4f97-e495-951274b26748"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Llama.generate: prefix-match hit\n"
          ]
        }
      ],
      "source": [
        "response=lcpp_llm(prompt=prompt_template, max_tokens=256, temperature=0.5, top_p=0.95,\n",
        "                  repeat_penalty=1.2, top_k=150,\n",
        "                  echo=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 215,
      "metadata": {
        "id": "aBNoZFTwfLlM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "86861fa1-e78b-4b6f-a689-8021b290988d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'id': 'cmpl-03f602eb-deb0-42db-9760-286f4f532426', 'object': 'text_completion', 'created': 1719905367, 'model': '/root/.cache/huggingface/hub/models--TheBloke--Llama-2-13B-chat-GGML/snapshots/3140827b4dfcb6b562cd87ee3d7f07109b014dd0/llama-2-13b-chat.ggmlv3.q5_1.bin', 'choices': [{'text': 'SYSTEM: You are a helpful, respectful, and honest assistant. Always answer as helpfully.\\n\\nUSER: generate precisely 20 numbers between -10 to 10 by using Centroidal Voronoi Tessellation , only 2 decimal places. Just give numeric response \\n\\nASSISTANT:\\n\\nCertainly! Here are 20 numbers generated using the Centroidal Voronoi Tessellation method, with two decimal places:\\n\\n1. -8.54\\n2. -6.73\\n3. -4.92\\n4. -3.11\\n5. -1.30\\n6. 0.29\\n7. 1.49\\n8. 2.68\\n9. 3.87\\n10. 5.06\\n11. 6.25\\n12. 7.44\\n13. 8.63\\n14. 9.82\\n15. 10.99\\n16. -0.17\\n17. -1.38\\n18. -2.56\\n19. -3.75\\n20. -4.94\\n\\nPlease note that the Centroidal Voronoi Tessellation method generates random numbers within a given range, so these values may not be exactly the same if you run the code again.', 'index': 0, 'logprobs': None, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 72, 'completion_tokens': 245, 'total_tokens': 317}}\n"
          ]
        }
      ],
      "source": [
        "print(response)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 216,
      "metadata": {
        "id": "l6ecM4udfLlM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b718d5ee-c800-4471-a34e-9a7636d7b800"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-8.54, -6.73, -4.92, -3.11, -1.3, 0.29, 1.49, 2.68, 3.87, 5.06, 6.25, 7.44, 8.63, 9.82, 10.99, -0.17, -1.38, -2.56, -3.75, -4.94]\n"
          ]
        }
      ],
      "source": [
        "import re\n",
        "\n",
        "text_response = response['choices'][0]['text']\n",
        "\n",
        "# Use a regular expression to find all numbers in the response\n",
        "numbers = re.findall(r'-?\\d+\\.\\d+', text_response)\n",
        "\n",
        "# Convert the numbers to floats\n",
        "numbers = [float(num) for num in numbers]\n",
        "Centroidal_Voronoi_Tessellation_Initialisation = numbers\n",
        "print(Centroidal_Voronoi_Tessellation_Initialisation)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l7aa8V0bfLlM"
      },
      "source": [
        "### PSO Parameters"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 217,
      "metadata": {
        "id": "BkZvbu2BfLlM"
      },
      "outputs": [],
      "source": [
        "# !pip install pyswarms\n",
        "# import numpy as np\n",
        "# import pyswarms as ps\n",
        "# # from pso.cost_functions import sphere"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 218,
      "metadata": {
        "id": "7p-Jy88bfLlM"
      },
      "outputs": [],
      "source": [
        "# initial_position = np.array(numbers)\n",
        "\n",
        "# def objective_function(x):\n",
        "#     return np.sum(x**2)\n",
        "\n",
        "# bounds = (np.array([-10]), np.array([10]))\n",
        "\n",
        "# options = {'c1': 0.5, 'c2': 0.3, 'w': 0.9}\n",
        "\n",
        "# optimizer = ps.single.GlobalBestPSO(n_particles=len(numbers), dimensions=1, options=options, bounds=bounds, init_pos=initial_position.reshape(-1, 1))\n",
        "\n",
        "# best_cost, best_pos = optimizer.optimize(objective_function, iters=100)\n",
        "\n",
        "# print('Best position:', best_pos)\n",
        "# print('Best objective:', best_cost)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 219,
      "metadata": {
        "id": "IGSp-OznfLlM"
      },
      "outputs": [],
      "source": [
        "# def sphere(x):\n",
        "#     return np.sum(x**2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 220,
      "metadata": {
        "id": "X2cHgRa8fLlM"
      },
      "outputs": [],
      "source": [
        "# CostFunction = sphere  #\n",
        "# nVar = 10  # Number of Decision Variables\n",
        "# VarSize = (nVar,)  # Size of Decision Variables Matrix\n",
        "# VarMin = -10  # Lower Bound of Variables\n",
        "# VarMax = 10  # Upper Bound of Variables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 221,
      "metadata": {
        "id": "D-mHN2SifLlM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c315972b-c2b7-45a2-f4ee-73ae6b99558c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "20\n"
          ]
        }
      ],
      "source": [
        "MaxIt = 20  # Maximum Number of Iterations\n",
        "nPop = np.size(numbers)  # Population Size (Swarm Size)\n",
        "if(nPop > 20):\n",
        "  numbers = numbers[0:20]\n",
        "print(nPop)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 222,
      "metadata": {
        "id": "S3vlf_vXfLlN"
      },
      "outputs": [],
      "source": [
        "w = 1  # Inertia Weight\n",
        "wdamp = 0.99  # Inertia Weight Damping Ratio\n",
        "c1 = 1.5  # Personal Learning Coefficient\n",
        "c2 = 2.0  # Global Learning Coefficient"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 223,
      "metadata": {
        "id": "P2ZukvAUfLlN"
      },
      "outputs": [],
      "source": [
        "# Velocity Limits                        HOWW. ASK BHAIYA ABOUT THIS\n",
        "VelMax = 0.1 * (VarMax - VarMin)\n",
        "VelMin = -VelMax"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 224,
      "metadata": {
        "id": "WMoBnq6VfLlN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b4fb67fd-b75c-4a88-ac4e-6ffe80cb1403"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "20\n"
          ]
        }
      ],
      "source": [
        "particles = []\n",
        "\n",
        "for i in range(nPop):\n",
        "    position = np.array([Centroidal_Voronoi_Tessellation_Initialisation[i]] * nVar)\n",
        "    velocity = np.zeros(VarSize)\n",
        "    cost = CostFunction(position)\n",
        "    best_position = position.copy()\n",
        "    best_cost = cost\n",
        "    particles.append({\n",
        "        'Position': position,\n",
        "        'Velocity': velocity,\n",
        "        'Cost': cost,\n",
        "        'Best': {\n",
        "            'Position': best_position,\n",
        "            'Cost': best_cost\n",
        "        }\n",
        "    })\n",
        "print(np.size(particles))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 225,
      "metadata": {
        "id": "vJYiRXR1fLlN"
      },
      "outputs": [],
      "source": [
        "GlobalBest = {'Position': None, 'Cost': np.inf}\n",
        "\n",
        "for p in particles:\n",
        "    if p['Cost'] < GlobalBest['Cost']:\n",
        "        GlobalBest = {'Position': p['Best']['Position'].copy(), 'Cost': p['Best']['Cost']}\n",
        "\n",
        "BestCost = np.zeros(MaxIt)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ttteXgYUfLlN"
      },
      "source": [
        "### Running PSO"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 226,
      "metadata": {
        "id": "E9GNEKl9fLlN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b16df49e-d53b-48bb-d189-cbd2ac7ac708"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Iteration 1: Best Cost = 0.28900000000000003\n",
            "Iteration 2: Best Cost = 0.28900000000000003\n",
            "Iteration 3: Best Cost = 0.28900000000000003\n",
            "Iteration 4: Best Cost = 0.28900000000000003\n",
            "Iteration 5: Best Cost = 0.28900000000000003\n",
            "Iteration 6: Best Cost = 0.28900000000000003\n",
            "Iteration 7: Best Cost = 0.28900000000000003\n",
            "Iteration 8: Best Cost = 0.28900000000000003\n",
            "Iteration 9: Best Cost = 0.28900000000000003\n",
            "Iteration 10: Best Cost = 0.28900000000000003\n",
            "Iteration 11: Best Cost = 0.28900000000000003\n",
            "Iteration 12: Best Cost = 0.28900000000000003\n",
            "Iteration 13: Best Cost = 0.28900000000000003\n",
            "Iteration 14: Best Cost = 0.28900000000000003\n",
            "Iteration 15: Best Cost = 0.28900000000000003\n",
            "Iteration 16: Best Cost = 0.28900000000000003\n",
            "Iteration 17: Best Cost = 0.28900000000000003\n",
            "Iteration 18: Best Cost = 0.28900000000000003\n",
            "Iteration 19: Best Cost = 0.28900000000000003\n",
            "Iteration 20: Best Cost = 0.28900000000000003\n"
          ]
        }
      ],
      "source": [
        "g_values = []\n",
        "w_values = []\n",
        "for it in range(MaxIt):\n",
        "    for p in particles:\n",
        "        # Update Velocity\n",
        "        r1 = np.random.rand(*VarSize)\n",
        "        r2 = np.random.rand(*VarSize)\n",
        "        p['Velocity'] = (\n",
        "            w * p['Velocity']\n",
        "            + c1 * r1 * (p['Best']['Position'] - p['Position'])\n",
        "            + c2 * r2 * (GlobalBest['Position'] - p['Position'])\n",
        "        )\n",
        "\n",
        "        # Apply Velocity Limits\n",
        "        p['Velocity'] = np.maximum(p['Velocity'], VelMin)\n",
        "        p['Velocity'] = np.minimum(p['Velocity'], VelMax)\n",
        "\n",
        "        # Update Position\n",
        "        p['Position'] += p['Velocity']\n",
        "\n",
        "        # Velocity Mirror Effect\n",
        "        IsOutside = (p['Position'] < VarMin) | (p['Position'] > VarMax)\n",
        "        p['Velocity'][IsOutside] = -p['Velocity'][IsOutside]\n",
        "\n",
        "        # Apply Position Limits\n",
        "        p['Position'] = np.maximum(p['Position'], VarMin)\n",
        "        p['Position'] = np.minimum(p['Position'], VarMax)\n",
        "\n",
        "        # Evaluation\n",
        "        p['Cost'] = CostFunction(p['Position'])\n",
        "\n",
        "        # Update Personal Best\n",
        "        if p['Cost'] < p['Best']['Cost']:\n",
        "            p['Best']['Position'] = p['Position'].copy()\n",
        "            p['Best']['Cost'] = p['Cost']\n",
        "\n",
        "            # Update Global Best\n",
        "            if p['Best']['Cost'] < GlobalBest['Cost']:\n",
        "                GlobalBest = {'Position': p['Best']['Position'].copy(), 'Cost': p['Best']['Cost']}\n",
        "\n",
        "    g_values.append(GlobalBest['Cost'])\n",
        "    BestCost[it] = GlobalBest['Cost']\n",
        "\n",
        "    print(f\"Iteration {it+1}: Best Cost = {BestCost[it]}\")\n",
        "\n",
        "    w *= wdamp\n",
        "    w_values.append(w)\n",
        "\n",
        "w_values.append(w)\n",
        "G_values_PSO_with_Centroidal_Voronoi_Tessellation_Initialisation = g_values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 227,
      "metadata": {
        "id": "AFMJZonLfLlN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 510
        },
        "outputId": "311162e0-9551-4f89-b0f1-63f697342a30"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "print(G_values_PSO_with_Centroidal_Voronoi_Tessellation_Initialisation)\n",
        "\n",
        "plt.plot(G_values_PSO_with_Centroidal_Voronoi_Tessellation_Initialisation)\n",
        "plt.xlabel(\"Iteration\")\n",
        "plt.ylabel(\"g_best\")\n",
        "plt.title(\"Values of G_Best over Iterations for Centroidal_Voronoi_Tessellation\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 227,
      "metadata": {
        "id": "FI1XEUUcmS0c"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pfLd6XBS74h2"
      },
      "source": [
        "## Final Comparision"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "G_values_PSO_with_Chaotic_Initialisation = [3.4527376000000003, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946, 0.7452963884026946]\n",
        "G_values_PSO_with_Pseudo_Random_Initialisation = [0.964789460226107, 0.964789460226107, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984, 0.44099999999999984]\n",
        "G_values_PSO_with_Quasi_Random_Sequence_Initialisation = [4.489000000000001, 0.9513342639588815, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829, 0.003999999999999829]\n",
        "G_values_PSO_with_Uniform_Experimental_Design_Initialisation = [0.676, 0.43893828526676987, 0.3179643110881383, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999, 0.2786825675134999]\n",
        "G_values_PSO_with_Centroidal_Voronoi_Tessellation_Initialisation = [0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003, 0.28900000000000003]\n",
        "\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "iterations = range(1, len(G_values_PSO_with_Chaotic_Initialisation) + 1)\n",
        "\n",
        "# Plot each g_values array\n",
        "plt.plot(iterations, G_values_PSO_with_Chaotic_Initialisation, label='Chaotic')\n",
        "plt.plot(iterations, G_values_PSO_with_Pseudo_Random_Initialisation, label='Pseudo Random')\n",
        "plt.plot(iterations, G_values_PSO_with_Quasi_Random_Sequence_Initialisation, label='Quasi Random')\n",
        "plt.plot(iterations, G_values_PSO_with_Uniform_Experimental_Design_Initialisation, label='Uniform Experimental Design')\n",
        "plt.plot(iterations, G_values_PSO_with_Centroidal_Voronoi_Tessellation_Initialisation, label='Centroidal Voronoi Tessellation')\n",
        "\n",
        "plt.title('Comparison of Initialisation Variations')\n",
        "plt.xlabel('Iteration')\n",
        "plt.ylabel('Global Best Cost')\n",
        "\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "nUkkdjB2VQlo",
        "outputId": "f6a4435b-ba59-4b12-cb42-2a4c788b7854"
      },
      "execution_count": 231,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "o74IcRMnVU-2"
      },
      "execution_count": 228,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "jbmt8iWOVVCD"
      },
      "execution_count": 228,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "RefJN7t2VVEj"
      },
      "execution_count": 228,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "EnxnF_diVVGq"
      },
      "execution_count": 228,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "aA5xz56FVVJL"
      },
      "execution_count": 228,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 229,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "u_JGdMPV76Zu",
        "outputId": "66ce432d-2867-419c-c206-e627fbf7eb22"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjsAAAHHCAYAAABZbpmkAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACy5ElEQVR4nOzdd3gU1frA8e+kbHo2JKQKJAQSCL1DKAKCUhSxYuEqKIpXQKRZUEDAhqAICBfrJXbs4s+rCCJF6b0GSEIKLQQSkpBe9vz+WHaSJQES2BTg/TzPPmRnZmfe2Q3Jm3Pec46mlFIIIYQQQlyn7Go6ACGEEEKIqiTJjhBCCCGua5LsCCGEEOK6JsmOEEIIIa5rkuwIIYQQ4romyY4QQgghrmuS7AghhBDiuibJjhBCCCGua5LsCCGEEOK6JsmOEDVE0zSmT59e02Fctc8//5ymTZvi6OiIl5dXlVwjISEBTdOIioqq0PFX+t6uWbMGTdNYs2aNvm348OGEhIRU+lxXq6auW92q4v9Br1696NWrl03PKa5tkuyIGhMXF8dTTz1FaGgozs7OeHp60q1bN+bPn09ubm5Nhycq4ODBgwwfPpxGjRrx0Ucf8eGHH1702OnTp6NpGmfOnLHJtX/77bdrPlk8ceIE06dPZ9euXTUdCgBz585F0zT+/PPPix7z0UcfoWkav/zySzVGVtaBAweYPn06CQkJNRqHuEYoIWrAr7/+qlxcXJSXl5caO3as+vDDD9XChQvVgw8+qBwdHdWTTz5Z0yFWudzcXFVYWFjTYVyVxYsXK0DFxMRc9thXXnlFAer06dOVvo7JZFK5ubmqqKhI3zZ69Gh1sR9hV/rerl69WgFq9erV+raCggKVl5dX6XNVxNatWxWglixZUmZfVV73Yo4fP67s7OzUY489dtFjevXqpXx8fFRBQYFNrnmln9V3331X5rOyyM/PV/n5+TaITlwvHGoy0RI3pvj4eB588EGCg4P566+/CAwM1PeNHj2a2NhY/ve//9VghFXHZDJRUFCAs7Mzzs7ONR3OVUtJSQGosu4rC03TKvV+2fK9dXR0tNm5avt1g4KC6N27Nz/++COLFy/GycnJav/x48dZt24dI0eOvKr4qvr/gcFgsPk5xTWuprMtceP597//rQC1fv36Ch1fWFioZs6cqUJDQ5XBYFDBwcFq8uTJZf7qDQ4OVrfffrtavXq1at++vXJ2dlYtWrTQ//L74YcfVIsWLZSTk5Nq166d2rFjh9Xrhw0bptzc3FRcXJy67bbblKurqwoMDFQzZsxQJpPJ6tg5c+aoyMhI5e3trZydnVW7du3Ud999VyZ2QI0ePVp98cUXqlmzZsrBwUH99NNP+r5XXnlFPzYzM1M9++yzKjg4WBkMBuXr66v69u2rtm/fbnXOb7/9VrVr1045OzsrHx8fNXToUHXs2LFy7+XYsWNq8ODBys3NTdWtW1dNnDjRqnXkUhYtWqSaNWumDAaDCgwMVKNGjVJnz561er8Bq0fp+7lQeS07PXv2VM2bN1f79+9XvXr1Ui4uLiooKEi99dZbVq+Nj4+3agEZNmxYmWuX/nF2YSwJCQnq6aefVuHh4crZ2Vl5e3ur++67T8XHx1tdp7yWnWHDhqng4GCr477++mvVrl075e7urjw8PFSLFi3UvHnz9P2pqalq4sSJqkWLFsrNzU15eHio/v37q127dpW51oWP0vd44XWzsrLUhAkTVL169ZTBYFDh4eFqzpw5Zb4/Ld93P/30k2revLkyGAyqWbNm6vfffy/vo7GyZMkSBagffvihzL63335bAervv/9WSlXN/4OKfFaWGC98WD63nj17qp49e1rFcOrUKfX4448rPz8/5eTkpFq1aqWioqKsjrF8n82ZM0d98MEH+s+cDh06qC1btlgde/LkSTV8+HB10003KYPBoAICAtSdd95Z5ntK1A6S7Ihqd9NNN6nQ0NAKH2/5xXbfffepRYsWqUcffVQB6q677rI6Ljg4WDVp0kQFBgaq6dOnq3fffVfddNNNyt3dXX3xxReqQYMGatasWWrWrFnKaDSqxo0bq+LiYqvrODs7q7CwMPXII4+ohQsXqjvuuEMBaurUqVbXqlevnho1apRauHChmjt3rurUqZMC1K+//mp1HKAiIiKUr6+vmjFjhlq0aJHauXOnvq/0D/mHH35YGQwGNWHCBPXxxx+rt956Sw0aNEh98cUX+jGWH/IdO3ZU7777rnrxxReVi4uLCgkJsUpELPfSvHlz9fjjj6vFixere++9VwHqP//5z2Xfc0ti0rdvX/Xee++pMWPGKHt7e9WxY0e9++Knn35Sd999twLU4sWL1eeff65279592XNemOwEBQWp+vXrq2effVb95z//UbfccosC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G5Sjo6OaOnWqcnBwUH///be+Lz4+XgFq1qxZ+rbCwkJVr1499dZbbymllHr11VfVbbfdZnXdo0ePKkAdOnRIKWV+39u2bVtufJbfJZZrffzxx1b3CKhVq1bp2958803VpEkT/XmjRo3UV199ZXXeV199VUVGRl70vJbPITo6WilV9vO/mK1btypAnTt3Timl1OrVqxWgzp49e9HXXPh9Upq/v796+umn9Zgv9T5u375dASohIaHccw0bNkwNHjxYKaVUZmamcnR0VN99952+Pz09Xbm6ulp9/wcHB6t//etf+nOTyaT8/PzU4sWLL3o/l3Phz4bSKvr7u9bW7MTHx5OcnEzfvn31bUajkc6dO+tNhRs3bsTLy4sOHTrox/Tt2xc7Ozs2b95c7TFXREndzgVrZKXk0NDYEBcHF3KLcknITKipEIUQVaR58+bY29vrzwMDAyvVhREdHU39+vWpX7++vq1Zs2Z4eXkRHR2tbwsODsbX17fM61u1aqV/7e/vD0DLli2ttuXl5ZGZmXnJON5991127dpl9QgKCtL3R0ZGMmnSJF599VUmTpxI9+7dy5wjMjJS/9rBwYEOHTro97B7925Wr16Nu7u7/mja1FzTWLqbrX379peMszL3bfkcsrOziYuLY8SIEVbXf+2118p08ZU+b2BgIMBlP8/t27czaNAgGjRogIeHBz179gTM3ZO2oJRC0zTg8u9j69at6dOnDy1btuT+++/no48+4uzZs+We98iRIxQWFtKpUyd9m9FopEmTJmWOLf2+aJpGQEDAFXXV2ZJDjV79EpKTk4GSb0wLf39/fV9ycnKZoj0HBwe8vb31Y8qTn5+v9ycDl/2PbUtOjc0zJedfsPp5ekou9nb2RHhHsCNlB/tT99PIq1G1xSVEbaO5uNBkx/Yau3ZFeXp6kpGRUWZ7eno6RqPRapujo6P1dTQNk8n2U024ubmVu7309S2/EMvbdrmYAgICaHz+D7fymEwm1q9fj729PbHnf9ZVRlZWFoMGDeKtt94qs8+SVMDF7/NCFblvyz1baj4/+ugjOnfubHWe0onqxc57qfcuOzubfv360a9fP7788kt8fX1JSkqiX79+NikkT01N5fTp0zRs2FC/l0u9j/b29qxcuZINGzawYsUK3nvvPV5++WU2b96sn+NKVNf3eWXU2padqvTmm29iNBr1R+m/kqqapUg5P84y14452TmXmkdxsamkSFlGZIkbnKZp2Lm61sjD8ourIpo0aVJu3cKOHTsIDw+35VtCREQER48e5ejRkukpDhw4QHp6Os2aNbPpta7GnDlzOHjwIGvXrmX58uUsWbKkzDGbNm3Svy4qKmL79u1EREQA0K5dO/bv309ISAiNGze2elQ0wblS/v7+BAUFceTIkTLXrkwCYDAYKC4uttp28OBBUlNTmTVrFj169KBp06Y2bfGYP38+dnZ2elFxRd5HTdPo1q0bM2bMYOfOnRgMBn766acy5w4NDcXR0ZGtW7fq2zIyMmrNlAiXU2uTnYCAAACrUQaW55Z95TWNFRUVkZaWph9TnsmTJ5ORkaE/Sv/gqGqWbqzCJPOILDcvAw4GO5RJce5MnhQpC3GNefrppzl8+DBjx45lz549HDp0iLlz5/L1118zceJEm16rb9++tGzZkqFDh7Jjxw62bNnCo48+Ss+ePa2686taeno6ycnJVg/LCJ6dO3cybdo0Pv74Y7p168bcuXN59tlnOXJ+UIbFokWL+Omnnzh48CCjR4/m7NmzPP744wCMHj2atLQ0HnroIbZu3UpcXBx//PEHjz32WJkEoirMmDGDN998kwULFnD48GH27t3LkiVLmDt3boXPERISQlZWFqtWreLMmTPk5OTQoEEDDAYD7733HkeOHOGXX37h1VdfvaIYz507R3JyMkePHtUH5rz22mu8/vrreqvb5d7HzZs388Ybb7Bt2zaSkpL48ccfOX36tJ50lubh4cGwYcN47rnnWL16Nfv372fEiBHY2dlV6o+DmlJrk52GDRsSEBDAqlWr9G2ZmZls3rxZ7+uNjIwkPT2d7dtLmrr/+usvTCZTmebH0pycnPD09LR6VBd7Hx/sjUZ9RJamaRh9LV1ZJSOyDqYdpMhUVG1xCSGuTGhoKOvWrePgwYP07duXzp078+233/Ldd9/Rv39/m15L0zSWLVtGnTp1uPnmm+nbty+hoaF88803Nr3O5Tz22GMEBgZaPd577z3y8vL417/+xfDhwxk0aBAAI0eOpHfv3jzyyCNWicqsWbOYNWsWrVu35p9//uGXX36hbt26AAQFBbF+/XqKi4u57bbbaNmyJePGjcPLyws7u6r/tfXEE0/w8ccfs2TJElq2bEnPnj2JioqqVMtO165d+fe//80DDzyAr68vs2fPxtfXl6ioKL777juaNWvGrFmzePvtt68oRsu0LI0bN+aRRx4hIyODVatW8cILL+jHXO599PT0ZN26dQwcOJDw8HCmTJnCO++8c9FJGefOnUtkZCR33HEHffv2pVu3bvrw/FrvisujbeDcuXNq586daufOnQpQc+fOVTt37tSr+mfNmqW8vLzUsmXL1J49e9TgwYNVw4YNrSqy+/fvr9q2bas2b96s/vnnHxUWFqYeeuihSsVRnaOxlCo1IuuXX5RSSv3+/h618KlVatefSarYVKy6fNlFtYhqoQ6mHqyWeISoDS414kJcPywjmXbu3FnToYirlJWVpYxGo9WotKpwzY/G2rZtG23btqVt27aAeQx/27Zt9fkOnn/+eZ555hlGjhxJx44dycrKYvny5VZZ5JdffknTpk3p06cPAwcOpHv37rViAqNL0UdkxVjX7aSn5GCn2dHMx9z3Ll1ZQgghaoudO3fy9ddfExcXx44dOxg6dCgAgwcPruHILq9GR2P16tXrkpN3aZrGzJkzmTlz5kWP8fb25quvvqqK8KrMhWtk6cPPT+cC0Lxuc7Ykb2H/mf3cE3ZPzQQphBBCXODtt9/m0KFDGAwG2rdvz99//613P9ZmtXbo+fXMybL6eax56QuvUnPtAFKkLIS4boWEhFTZDNWiarVt29aqRvZaUmsLlK9nTo3Or5F1fkSW1fDzIpOe7Bw6e4iCYtsv4ieEEELcSCTZqQH2deuWjMiKj8fV04Cjkz1KQeaZXG5yvwmjk5EiUxExZ2Muf0IhhBBCXJQkO1Xs9Ln8Mts0TcOgd2XFmoef+5Wsfq5pmnRlCSGEEDYiyU4VKSo2MXD+33R8/U+OpuWU2a8XKVvWyDo/147U7QghhBC2JclOFXGwt8PVYF5H5Z/YM2X2lywIalkjq6RlB5BlI4QQQggbkWSnCvUIM686/E9MecmOuUi5INZ6rp0LW3Zi02PJK8qr8liFEEKI65UkO1Woe5h57oH1cWcoNlkPtbS07BQcPYopP79Uy4452fF39cfH2YdiVczBtIPVGLUQ4kawZs0aNE0jPT39osdERUXh5eVVqfOGhIQwb968q4qtNps+fTpt2rSp6TAq7cLPRdM0fv7556s+r63OU9Uk2alCresZ8XB2ID2nkH3HM6z22deti53RCCYTBUeO6C07WWfzKSosNhcp15W6HSGuBcnJyTzzzDOEhobi5ORE/fr1GTRokNXafrbQq1cvxo0bZ5Nzde3alZMnT2I0Gm1yvop45plnyl1kEiApKQl7e3t++eWXaovnSkyaNOmin+v06dPRNO2Sj2vVxZK8kydPXnQtrdpEkp0q5GBvR9dGPkDZuh1N00rV7cTh4uGIwdkeVKmZlM93ZR1IPVCNUQshKiMhIYH27dvz119/MWfOHPbu3cvy5cvp3bs3o0ePrvZ4lFIUFV1+EWGDwUBAQEC1/gIeMWIEBw8eZMOGDWX2RUVF4efnx8CBAyt93oKC6puPzN3dHR8fn3L3TZo0iZMnT+qPevXqMXPmTKtt15uAgACcnJxqOozLkmSninU/X7ez7vDpMvtKFymbh59b6nbMyU6Lui0AKVIWojYbNWoUmqaxZcsW7r33XsLDw2nevDkTJkxg06ZN+nHp6ek88cQT+Pr64unpyS233MLu3bv1/Za/nD///HNCQkIwGo08+OCDnDt3DoDhw4ezdu1a5s+fr7cSJCQk6N1Rv//+O+3bt8fJyYl//vmH/Px8xo4di5+fH87OznTv3p2tW7fq1yuvGysqKooGDRrg6urK3XffTWpqqtW9xsXFMXjwYPz9/XF3d6djx478+eefFX6v2rRpQ7t27fjvf/9rtV0pRVRUFMOGDcPBwYG1a9fSqVMnnJycCAwM5MUXX7RK4Hr16sWYMWMYN24cdevWpV+/fgAVet3YsWN5/vnn8fb2JiAggOnTp1vFkpSUxODBg3F3d8fT05MhQ4Zw6tSpMp9Tedzd3QkICNAf9vb2eHh46M8LCwsZMmQIXl5eeHt7M3jwYBISEvTXr1mzhk6dOuHm5oaXlxfdunUjMTERgN27d9O7d288PDzw9PSkffv2bNu2TX/tP//8Q48ePXBxcaF+/fqMHTuW7OzsCn82L7zwAuHh4bi6uhIaGsrUqVMpLCwEzN8XM2bMYPfu3fr3XlRUFFC2G2vv3r3ccsstuLi44OPjw8iRI8nKytL3Dx8+nLvuuou3336bwMBAfHx8GD16tH6tqiLJThW7+Xzdzo6ks2TnW/+1ZZlJOT/uwhFZ5rody4KgRzKOkFNYdvi6ENczpRSF+cU18qjocgZpaWksX76c0aNH4+bmVmZ/6XqX+++/n5SUFH7//Xe2b99Ou3bt6NOnD2lpafoxcXFx/Pzzz/z666/8+uuvrF27llmzZgEwf/58IiMjefLJJ/VWgvr16+uvffHFF5k1axbR0dG0atWK559/nh9++IFPP/2UHTt20LhxY/r162d1vdI2b97MiBEjGDNmDLt27aJ379689tprVsdkZWUxcOBAVq1axc6dO+nfvz+DBg0iKSmpQu8XmFt3vv32W6tfxGvWrCE+Pp7HH3+c48ePM3DgQDp27Mju3btZvHgxn3zySZlYPv30UwwGA+vXr+f999+v1Ovc3NzYvHkzs2fPZubMmaxcuRIAk8nE4MGDSUtLY+3ataxcuZIjR47wwAMPVPj+LqawsJB+/frh4eHB33//zfr163F3d6d///4UFBRQVFTEXXfdRc+ePdmzZw8bN25k5MiResvb0KFDqVevHlu3bmX79u28+OKLODo6Aubvm/79+3PvvfeyZ88evvnmG/755x/GjBlT4fg8PDyIioriwIEDzJ8/n48++oh3330XgAceeICJEyfSvHlz/XuvvPckOzubfv36UadOHbZu3cp3333Hn3/+WSaO1atXExcXx+rVq/n000+JiorSk6eqImtjVbFgHzfqe7twNC2XzfGp3NLUX99nWSOrIObCEVnmlp26LnXxd/XnVM4potOiae/fvpqjF6LmFBWY+PDZtTVy7ZHze+LoZH/Z42JjY1FK0bRp00se988//7BlyxZSUlL0Jv+3336bn3/+me+//56RI0cC5l+2UVFReHh4APDII4+watUqXn/9dYxGIwaDAVdXVwICAspcY+bMmdx6662A+ZfO4sWLiYqK0uspPvroI1auXMknn3zCc889V+b18+fPp3///jz//PMAhIeHs2HDBpYvX64f07p1a1q3bq0/f/XVV/npp5/45ZdfKvyL9eGHH2bixIl89913DB8+HIAlS5bQvXt3wsPDefnll6lfvz4LFy5E0zSaNm3KiRMneOGFF5g2bRp2dua/0cPCwpg9e7Z+3oq+rlWrVrzyyiv6ORYuXMiqVau49dZbWbVqFXv37iU+Pl5PJD/77DOaN2/O1q1b6dixY4XusTzffPMNJpOJjz/+WE9glixZgpeXF2vWrKFDhw5kZGRwxx130Oj8H8Kl65uSkpJ47rnn9O+1sLAwfd+bb77J0KFD9XqusLAwFixYQM+ePVm8eDHOzs6XjW/KlCn61yEhIUyaNImlS5fy/PPP4+Ligru7Ow4O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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "G_values_PSO_with_Chaotic_Initialisation = [95.81318302418991, 63.60053873904889, 28.601818771602066, 11.568002310425129, 11.568002310425129, 11.568002310425129, 7.9359559823818575, 7.742273568449956, 4.722742686548912, 4.063721904435923, 4.063721904435923, 2.7455323239994325, 2.7455323239994325, 2.7455323239994325, 2.7455323239994325, 2.7455323239994325, 2.164817157940039, 2.164817157940039, 2.164817157940039, 2.164817157940039]\n",
        "G_values_PSO_with_Pseudo_Random_Initialisation = [64.77259238712006, 11.605574003344417, 11.605574003344417, 11.605574003344417, 8.677673532130528, 8.677673532130528, 6.413132080726261, 4.2820947134796565, 4.2820947134796565, 2.2296549571957445, 2.2296549571957445, 2.2296549571957445, 2.2296549571957445, 2.2296549571957445, 2.2296549571957445, 2.09234858885256, 2.09234858885256, 1.8378452613065557, 1.8378452613065557, 1.5782685910547787]\n",
        "G_values_PSO_with_Quasi_Random_Sequence_Initialisation = [123.74082459038225, 80.88482593211741, 28.83323291766405, 11.467550918304433, 11.467550918304433, 11.467550918304433, 9.587280714412989, 4.965846161991052, 4.965846161991052, 4.096994699453742, 3.8492809341304604, 3.8492809341304604, 2.709448446678348, 2.709448446678348, 2.709448446678348, 2.709448446678348, 2.709448446678348, 0.8783831178904116, 0.8783831178904116, 0.8783831178904116]\n",
        "G_values_PSO_with_Uniform_Experimental_Design_Initialisation = [112.10405318922031, 59.585873309076206, 18.354798227448065, 8.863714798969847, 6.460801335879746, 6.460801335879746, 6.460801335879746, 6.460801335879746, 4.147592399233504, 4.147592399233504, 3.02273004929555, 3.02273004929555, 3.02273004929555, 3.02273004929555, 3.02273004929555, 2.91460438703247, 2.91460438703247, 2.91460438703247, 2.91460438703247, 2.6347650942968506]\n",
        "G_values_PSO_with_Centroidal_Voronoi_Tessellation_Initialisation = [124.58312001027522, 64.03263576011642, 40.89321688658535, 23.173751674820547, 15.772434273422588, 15.772434273422588, 15.772434273422588, 9.958425787132136, 9.958425787132136, 8.683640892576278, 8.62708369481974, 6.61761114548703, 5.821850887915298, 4.886369159767403, 4.886369159767403, 4.886369159767403, 4.362666361060199, 4.362666361060199, 2.3259957684435504, 2.3259957684435504]\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "iterations = range(1, len(G_values_PSO_with_Chaotic_Initialisation) + 1)\n",
        "\n",
        "# Plot each g_values array\n",
        "plt.plot(iterations, G_values_PSO_with_Chaotic_Initialisation, label='Chaotic')\n",
        "plt.plot(iterations, G_values_PSO_with_Pseudo_Random_Initialisation, label='Pseudo Random')\n",
        "plt.plot(iterations, G_values_PSO_with_Quasi_Random_Sequence_Initialisation, label='Quasi Random')\n",
        "plt.plot(iterations, G_values_PSO_with_Uniform_Experimental_Design_Initialisation, label='Uniform Experimental Design')\n",
        "plt.plot(iterations, G_values_PSO_with_Centroidal_Voronoi_Tessellation_Initialisation, label='Centroidal Voronoi Tessellation')\n",
        "\n",
        "plt.title('Comparison of Initialisation Variations')\n",
        "plt.xlabel('Iteration')\n",
        "plt.ylabel('Global Best Cost')\n",
        "\n",
        "plt.legend()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 229,
      "metadata": {
        "id": "cwU2Iw5D9LoP"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "collapsed_sections": [
        "9uP6rkKmNnMe",
        "SNwOmkAOSTpA",
        "iQxOnM8n_ZmV",
        "UzoXLSuRZ1Vt",
        "Wzn6yIXMUyzI",
        "ewdHnMHmbqZx",
        "pdOzOS0fc7Nz"
      ],
      "gpuType": "T4",
      "provenance": [],
      "authorship_tag": "ABX9TyPqhN9Kgbso7gCr1IJKR7o0",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "266f930c2b0544dba6780e3728ba79e6": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "38cc58d7ba9d4ed0a006f1349f3ee226": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HBoxModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_9cae8dd3c8f44e4ca2ec0f8f28340f5e",
              "IPY_MODEL_e41bae8ba6e54479a60c8d0ace76ff76",
              "IPY_MODEL_722e7d0ea7054ca181fb46579b92fa4c"
            ],
            "layout": "IPY_MODEL_5752a9b8a3a045cabe685422e75c8e6b"
          }
        },
        "5752a9b8a3a045cabe685422e75c8e6b": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "57c7a0ee62de418ea6367661d2d243d8": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "595a3d3fd13242efae4bdebc5d69eaa7": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "ProgressStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "63f8371a479940df9e518ae46f062f09": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "722e7d0ea7054ca181fb46579b92fa4c": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_77c37e21e7d9410bb8e7432ed42051ea",
            "placeholder": "​",
            "style": "IPY_MODEL_63f8371a479940df9e518ae46f062f09",
            "value": " 9.76G/9.76G [01:09&lt;00:00, 252MB/s]"
          }
        },
        "77c37e21e7d9410bb8e7432ed42051ea": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9cae8dd3c8f44e4ca2ec0f8f28340f5e": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "HTMLModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_266f930c2b0544dba6780e3728ba79e6",
            "placeholder": "​",
            "style": "IPY_MODEL_57c7a0ee62de418ea6367661d2d243d8",
            "value": "llama-2-13b-chat.ggmlv3.q5_1.bin: 100%"
          }
        },
        "dfd77fc2b7154127815da966b04a75c7": {
          "model_module": "@jupyter-widgets/base",
          "model_module_version": "1.2.0",
          "model_name": "LayoutModel",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e41bae8ba6e54479a60c8d0ace76ff76": {
          "model_module": "@jupyter-widgets/controls",
          "model_module_version": "1.5.0",
          "model_name": "FloatProgressModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_dfd77fc2b7154127815da966b04a75c7",
            "max": 9763701888,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_595a3d3fd13242efae4bdebc5d69eaa7",
            "value": 9763701888
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
